----CENTRAL-6417, CENTRAL-6881

USE self_serve;

alter table `activity_instance` add pending_parent_id varchar(255);
alter table `action` add response_definition json;


-- TODO: move these definitions to another patch after testing entity_id_lookup changes
-- UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"ohs\", \"idLookupKeys\": \"queueTags\", \"relativePath\": \"/v1/ohs/adminEntity/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, liveEntityIds) { var uiData = JSON.parse(pageData).updateQueues_p0.basicSection; var apiData = [ { \\\"entityAttributes\\\": { \\\"queueName\\\": uiData.queueName, \\\"queueDesc\\\": uiData.queueDesc, \\\"queueType\\\": uiData.queueType }, \\\"entityBaseData\\\": { \\\"accountId\\\": accountId + \\\"-account-default\\\", \\\"clientId\\\": \\\"nemo-client-\\\" + clientId, \\\"entityDisplayName\\\": uiData.queueName, \\\"entityType\\\": \\\"queue\\\", \\\"entityId\\\": uiData.queueId } } ]; if(env == \\\"TEST\\\"){ if (uiData.queueTags && uiData.queueTags.join(\\\",\\\") !== \\\"\\\") { apiData[ 0 ].entityAttributes.tags = uiData.queueTags.join(\\\",\\\") } } else if(env == \\\"LIVE\\\") { queueTags = JSON.parse(liveEntityIds).queueTags; apiData[ 0 ].entityAttributes.tags = queueTags}; return JSON.stringify(apiData); }\"}', `response_definition` = '{\"entityResponseTranslator\": \"var ApiResponse = function(_status, _message){ this.status = _status; this.message = _message; }; function translate(responseData) { try{ if(!responseData){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } var uiData = JSON.parse(responseData); if(uiData != null && uiData.status == \'SUCCESS\' && uiData.data != null){ return new ApiResponse(uiData.status, uiData.data.entityId); } else { return new ApiResponse(uiData.status, uiData.errorMessage); } }catch(e){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } } \"}' WHERE (`id` = '16');
-- UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"ohs\", \"idLookupKeys\": \"queueTags\", \"relativePath\": \"/v1/ohs/adminEntity/create?entity=${body}\", \"bodyDefinition\": {}, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, liveEntityIds) { var uiData = JSON.parse(pageData).createQueues_p0.basicSection; var apiData = [ { \\\"entityAttributes\\\": { \\\"queueName\\\": uiData.queueName, \\\"queueDesc\\\": uiData.queueDesc, \\\"queueType\\\": uiData.queueType }, \\\"entityBaseData\\\": { \\\"accountId\\\": accountId + \\\"-account-default\\\", \\\"clientId\\\": \\\"nemo-client-\\\" + clientId, \\\"entityDisplayName\\\": uiData.queueName, \\\"entityType\\\": \\\"queue\\\" } } ]; if(env == \\\"TEST\\\"){ if (uiData.queueTags && uiData.queueTags.join(\\\",\\\") !== \\\"\\\") { apiData[ 0 ].entityAttributes.tags = uiData.queueTags.join(\\\",\\\") } } else if(env == \\\"LIVE\\\") { queueTags = JSON.parse(liveEntityIds).queueTags; apiData[ 0 ].entityAttributes.tags = queueTags}; return JSON.stringify(apiData); }\"}', `response_definition` = '{\"entityResponseTranslator\": \"var ApiResponse = function(_status, _message){ this.status = _status; this.message = _message; }; function translate(responseData) { try{ if(!responseData){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } var uiData = JSON.parse(responseData); if(uiData != null && uiData.status == \'SUCCESS\' && uiData.data != null){ return new ApiResponse(uiData.status, uiData.data.entityId); } else { return new ApiResponse(uiData.status, uiData.errorMessage); } }catch(e){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } } \"}' WHERE (`id` = '12');
-- UPDATE `action` SET `response_definition` = '{\"entityResponseTranslator\": \"var ApiResponse = function(_status, _message){ this.status = _status; this.message = _message; }; function translate(responseData) { try{ if(!responseData){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } var uiData = JSON.parse(responseData); if(uiData != null && uiData.status == \'SUCCESS\' && uiData.data != null){ return new ApiResponse(uiData.status, uiData.data.entityId); } else { return new ApiResponse(uiData.status, uiData.errorMessage); } }catch(e){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } } \"}' WHERE (`id` = '6');
-- UPDATE `action` SET `response_definition` = '{\"entityResponseTranslator\": \"var ApiResponse = function(_status, _message){ this.status = _status; this.message = _message; }; function translate(responseData) { try{ if(!responseData){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } var uiData = JSON.parse(responseData); if(uiData != null && uiData.status == \'SUCCESS\' && uiData.data != null){ return new ApiResponse(uiData.status, uiData.data.entityId); } else { return new ApiResponse(uiData.status, uiData.errorMessage); } }catch(e){ return new ApiResponse(\'ERROR\', \'Error while processing your request\'); } } \"}' WHERE (`id` = '2');


CREATE TABLE `entity_id_lookup` (
  `id` int(11) NOT NULL,
  `live_entity_id` varchar(255) DEFAULT NULL,
  `test_entity_id` varchar(255) DEFAULT NULL,
  `entity_template_id` int(11) DEFAULT NULL,
  `created_by` varchar(255) NOT NULL,
  `created_on` datetime(6) NOT NULL,
  `last_updated_by` varchar(255) DEFAULT NULL,
  `last_updated_on` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKce4bbcaydd8s4c6c25c9woc9t` (`entity_template_id`),
  CONSTRAINT `FKce4bbcaydd8s4c6c25c9woc9t` FOREIGN KEY (`entity_template_id`) REFERENCES `entity_template` (`id`)
)ENGINE = InnoDB  DEFAULT CHARACTER SET = utf8;;