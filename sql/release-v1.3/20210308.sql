use `self_serve`;

UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(values) { var entities=[]; var list=[]; try{ values=JSON.parse(values); list=values.data.items; } catch(e){ return e.toString(); } list.forEach(function(item){ entities.push({ name:item.key, label: item.userName, labelState: item.status }); }); return JSON.stringify(entities);}\"}' WHERE (`id` = '55');
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData) { var uiData = {\\\"tabsField\\\": [{},{},{}]}; var u = JSON.parse(apiData).items; var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits.toString(); t0.autoAcceptChats = u.autoAcceptChats.toString(); t0.teamId = u.teamId; if(u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper={}; t1.ConfigMapper = u.skillLevels.map(function(sklvl){var keywords = sklvl.skillLevelId.split(\\\"-\\\"); var key = keywords[keywords.length-1].toUpperCase(); return({ id: sklvl.skillId, name: sklvl.skillId, key: key })}); var t2 = uiData.tabsField[2]; t2.ConfigMapper={}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function(tId){ return({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" })}): [];  return JSON.stringify(uiData); }\"}' WHERE (`id` = '50');
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData) { var uiData = {\\\"tabsField\\\": [{},{},{}]}; var u = JSON.parse(apiData).items; var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits.toString(); t0.autoAcceptChats = u.autoAcceptChats.toString(); t0.teamId = u.teamId; if(u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper={}; t1.ConfigMapper = u.skillLevels.map(function(sklvl){var keywords = sklvl.skillLevelId.split(\\\"-\\\"); var key = keywords[keywords.length-1].toUpperCase(); return({ id: sklvl.skillId, name: sklvl.skillId, key: key })}); var t2 = uiData.tabsField[2]; t2.ConfigMapper={}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function(tId){ return({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" })}): [];  return JSON.stringify(uiData); }\"}' WHERE (`id` = '51');


INSERT INTO `action_workflow` (`id`, `created_by`, `created_on`, `last_updated_by`, `last_updated_on`, `action_id`, `activity_template_id`) VALUES
('53', 'default.user', '2021-03-01 17:44:15.136579', 'default.user', '2021-03-01 17:44:15.136579', '37', 'userTest');

INSERT INTO `action_workflow` (`id`, `created_by`, `created_on`, `last_updated_by`, `last_updated_on`, `action_id`, `activity_template_id`) VALUES
('54', 'default.user', '2019-08-27 17:44:15.136579', 'default.user', '2019-08-27 17:44:15.136579', '45', 'sessiontimeout');
