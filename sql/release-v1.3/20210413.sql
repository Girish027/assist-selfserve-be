-- property validation
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updatePropertyValidation_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/validator/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { var apiData = JSON.parse(pageData).updatePropertyValidation_p0; if (!apiData.validatorRule) { apiData.validatorRule = \\\"\\\"; } if (!apiData.enumValues || apiData.enumValues.length == 0) { apiData.enumValues = [\\\"\\\"]; } if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.validatorName}, \\\"updatePropertyValidation_p0.key\\\"); if (key !== \\\"\\\"){ apiData.key = key; } } return JSON.stringify(apiData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } }} return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listPropertyValidations\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '42');

-- property config
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updatePropertyConfig_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/propertyconfiguration/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updatePropertyConfig_p0; var apiData = {}; if (pageData.scope.scopeType === \\\"account\\\") { apiData.scopeId = pageData.scope.accountId; } else { apiData.scopeId = pageData.scope.queueScope; } apiData.scopeType = pageData.scope.scopeType; apiData.contextVariableBaseId = \\\"\\\"; apiData.varTypeLabel = \\\"\\\"; apiData.varName = pageData.varName; apiData.order = pageData.order; apiData.varType = pageData.varType; apiData.displayName = pageData.displayName; apiData.validatorId = pageData.validatorId; apiData.editableFlag = pageData.editableFlag; apiData.maskableFlag = pageData.maskableFlag; apiData.mandatoryFlag = pageData.mandatoryFlag; apiData.varDescription = pageData.varDescription; if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.varName, secondaryLabel:pageData.varType}, \\\"updatePropertyConfig_p0.key\\\"); if(key !== \\\"\\\"){ apiData.key = key; }else{ apiData.key = pageData.key; } } else { apiData.key = pageData.key; } return JSON.stringify(apiData) } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } }} return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listProperty\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '26');

--data masking pattern
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateMaskingPatterns_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/messagepolicy/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateMaskingPatterns_p0; if (pageData.scopeType === \\\"account\\\") { pageData.scopeId = pageData.accountScope; } else { pageData.scopeId = pageData.queueScope; } if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.piiMaskName},\\\"updateMaskingPatterns_p0.key\\\" ); if (key !== \\\"\\\") { pageData.key = key; } } return JSON.stringify(pageData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; }}} return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listDataMaskingPattern\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '28');

--lead console
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateLeadConsole_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/monitoringconfig/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateLeadConsole_p0; var apiData = {}; if (pageData.propertyType === \\\"Reset Time\\\") { apiData.propertyType = \\\"RESET_TIME\\\"; } else { apiData.propertyType = pageData.propertyType; } if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.applicationValue}, \\\"updateLeadConsole_p0.key\\\"); if (key !== \\\"\\\") { apiData.key = key; } else { apiData.key = pageData.key; } } else { apiData.key = pageData.key; } apiData.hours = pageData.time.hours; apiData.minutes = pageData.time.minutes; apiData.meridiem = pageData.time.meridian; return JSON.stringify(apiData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; }}} return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listLeadReset\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '31');

-- keyword alerts
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/notificationconfig/update?notificationConfigObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityId) { pageData = JSON.parse(pageData).updateMsgFilter_p0; if (env === \\\"LIVE\\\") { pageData.key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.notificationType}, liveEntityIdKey); } return JSON.stringify(pageData) } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; }}} return key; }\", \"preFetchDefinition\": { \"listLiveKeyWords\": { \"env\": \"LIVE\", \"fetchFor\": \"listKeywords\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '34');

-- active cards
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateActiveCards_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/smartcommand/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateActiveCards_p0; if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.commandName}, \\\"updateActiveCards_p0.key\\\"); if (key !== \\\"\\\") { pageData.key = key; } } return JSON.stringify(pageData) } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } } } return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listActiveCards\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '24');

--session timeout
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer\" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateSessionTimeout_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/timeoutconfig/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateSessionTimeout_p0; var profileId = \\\"timeout_\\\"; var apiData = {}; apiData.expression = pageData.expression; apiData.profileId = profileId.concat(pageData.timeout); if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.expression,secondaryLabel: pageData.timeout}, \\\"updateSessionTimeout_p0.key\\\"); if (key !== \\\"\\\") { apiData.key = key; } else { apiData.key = pageData.key; } } else { apiData.key = pageData.key; } return JSON.stringify(apiData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } }} return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listsessiontimeout\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '46');

 --mailer 
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateMailer_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/mailerconfig/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateMailer_p0; var templateConfigObj = {}; var apiData = {}; for (var i = 0; i < pageData.tabsField[0].baseConfigurationAccordionTabs.length; i++) { for (var key in pageData.tabsField[0].baseConfigurationAccordionTabs[i]) { templateConfigObj[key] = pageData.tabsField[0].baseConfigurationAccordionTabs[i][key]; } } var templateConfig = {}; templateConfig.header = templateConfigObj.extendedSubject; templateConfig.LogoURL = templateConfigObj.companyLogo; templateConfig.greetingMessage = templateConfigObj.greetings; templateConfig.signOffMessage = templateConfigObj.signOffMsg; templateConfig.signatureMessage = templateConfigObj.signatureText; templateConfig.headerMessage = templateConfigObj.message; templateConfig.c2CMessage = templateConfigObj.clickToChatMsg; templateConfig.c2CButtonURL = templateConfigObj.buttonUrl; templateConfig.c2CButtonText = templateConfigObj.buttonLabel; templateConfig.logoThemeBtnCol = templateConfigObj.logoBackground; templateConfig.logoPosition = templateConfigObj.logoPosition; templateConfig.themeName = templateConfigObj.themeSelector.theme; templateConfig.themeBgCol = templateConfigObj.themeSelector.bgColor; templateConfig.themeLinkCol = templateConfigObj.themeSelector.linkColor; templateConfig.themeBtnCol = templateConfigObj.themeSelector.buttonColor; templateConfig.appendName = templateConfigObj.showCustomerName; templateConfig.appendClickToChat = templateConfigObj.showClick; templateConfig.appendSignOff = templateConfigObj.showSignOff; templateConfig.appendSignature = templateConfigObj.showSignature; templateConfig.contextDetailsText = \\\"null\\\"; var footer = templateConfigObj.footer; var labels = [\\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\"]; for (var i = 0; i < labels.length; i++) { var label = labels[i]; if (footer[i] !== undefined) { templateConfig[\\\"footer\\\" + label] = footer[i].showFooter; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = footer[i].label; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = footer[i].linkUrl; } else { templateConfig[\\\"footer\\\" + label] = false; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = \\\"\\\"; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = \\\"\\\"; } } templateConfig.footerMessage = templateConfigObj.footerMessage; templateConfig.appendAgentDetails = true; templateConfig.appendContextDetails = false; apiData.templateConfig = templateConfig; apiData.isSSL = pageData.mailConfigAccordionTabs[0].isSsl === \\\"true\\\"; apiData.bccId = pageData.mailConfigAccordionTabs[0].bccEmail; apiData.fromName = pageData.mailConfigAccordionTabs[0].fromName; apiData.smtpPort = pageData.mailConfigAccordionTabs[0].smtpPort; apiData.smtpHost = pageData.mailConfigAccordionTabs[0].smtpHost; apiData.configKey = pageData.mailConfigAccordionTabs[0].configKey; apiData.debugEnabled = pageData.mailConfigAccordionTabs[0].debugEnable === \\\"true\\\"; apiData.fromEmail = pageData.mailConfigAccordionTabs[0].fromEmailId; apiData.mailSubject = pageData.mailConfigAccordionTabs[0].mailSubject; apiData.fromPassword = pageData.mailConfigAccordionTabs[0].fromPassword; apiData.clientId = \\\"nemo-client-\\\" + clientId; apiData.accountId = accountId + \\\"-account-default\\\"; apiData.mailOpeningLines = \\\"\\\"; apiData.mailSalutation = \\\"\\\"; if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:apiData.configKey}, \\\"updateMailer_p0.key\\\"); if (key !== \\\"\\\") { apiData.key = key; } else { apiData.key = pageData.mailConfigAccordionTabs[0].key; } } else { apiData.key = pageData.mailConfigAccordionTabs[0].key; } return JSON.stringify(apiData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; }} } return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listMailerConfig\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '33');

UPDATE `self_serve`.`fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(values) { values = JSON.parse(values)[0]; var uiData = {}; uiData.key =values.key; var mailConfigAccordionTabs = {}; mailConfigAccordionTabs.isSsl = values.isSSL.toString(); mailConfigAccordionTabs.key = values.key; mailConfigAccordionTabs.bccEmail = values.bccId; mailConfigAccordionTabs.fromName = values.fromName; mailConfigAccordionTabs.smtpPort = values.smtpPort; mailConfigAccordionTabs.smtpHost = values.smtpHost; mailConfigAccordionTabs.configKey = values.configKey; mailConfigAccordionTabs.debugEnable = values.debugEnabled.toString(); mailConfigAccordionTabs.fromEmailId = values.fromEmail; mailConfigAccordionTabs.mailSubject = values.mailSubject; mailConfigAccordionTabs.fromPassword = values.fromPassword; var tabsField = []; var baseConfigurationAccordionTabs = []; var themeObj = {}; if (values.templateConfig !== undefined) { var templateConfig = values.templateConfig; themeObj.themeSelector = {}; themeObj.themeSelector.theme = templateConfig.themeName; themeObj.themeSelector.bgColor = templateConfig.themeBgCol; themeObj.themeSelector.linkColor = templateConfig.themeLinkCol; themeObj.themeSelector.buttonColor = templateConfig.themeBtnCol; baseConfigurationAccordionTabs.push(themeObj); var headerObj = {}; headerObj.extendedSubject = templateConfig.header !== \\\"null\\\" ? templateConfig.header : \\\"\\\"; headerObj.companyLogo = templateConfig.LogoURL !== \\\"null\\\" ? templateConfig.LogoURL : undefined; headerObj.logoPosition = templateConfig.logoPosition !== \\\"null\\\" ? templateConfig.logoPosition : \\\"\\\"; headerObj.logoBackground = templateConfig.logoThemeBtnCol !== \\\"null\\\" ? templateConfig.logoThemeBtnCol : \\\"\\\"; headerObj.greetings = templateConfig.greetingMessage !== \\\"null\\\" ? templateConfig.greetingMessage : \\\"\\\"; headerObj.showCustomerName = templateConfig.appendName !== \\\"null\\\" ? templateConfig.appendName : \\\"\\\"; headerObj.message = templateConfig.headerMessage !== \\\"null\\\" ? templateConfig.headerMessage : \\\"\\\"; baseConfigurationAccordionTabs.push(headerObj); var c2cObj = {}; c2cObj.showClick = templateConfig.appendClickToChat; c2cObj.clickToChatMsg = templateConfig.c2CMessage !== \\\"null\\\" ? templateConfig.c2CMessage : \\\"\\\"; c2cObj.buttonLabel = templateConfig.c2CButtonText !== \\\"null\\\" ? templateConfig.c2CButtonText : \\\"\\\"; c2cObj.buttonUrl = templateConfig.c2CButtonURL !== \\\"null\\\" ? templateConfig.c2CButtonURL : undefined; baseConfigurationAccordionTabs.push(c2cObj); var footerObj = {}; footerObj.showSignOff = templateConfig.appendSignOff; footerObj.signOffMsg = templateConfig.signOffMessage !== \\\"null\\\" ? templateConfig.signOffMessage : \\\"\\\"; footerObj.showSignature = templateConfig.appendSignature !== \\\"null\\\" ? templateConfig.appendSignature : \\\"\\\"; footerObj.signatureText = templateConfig.signatureMessage !== \\\"null\\\" ? templateConfig.signatureMessage : \\\"\\\"; footerObj.footerMessage = templateConfig.footerMessage !== \\\"null\\\" ? templateConfig.footerMessage : \\\"\\\"; var footer = []; var labels = [\\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\"]; footer.push({ showFooterLink: templateConfig.footerLinkOne, label: templateConfig.footerLinkOneText, linkUrl: templateConfig.footerLinkOneURL }); for (var i = 0; i < labels.length; i++) { var label = labels[i]; if (templateConfig[\\\"footerLink\\\" + label] === true) { footer.push({ showFooterLink: templateConfig[\\\"footerLink\\\" + label], label: templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] !== \\\"null\\\"? templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"]: \\\"\\\", linkUrl: templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] !== \\\"null\\\" ? templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"]: \\\"\\\" }); } else { if (templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] !== \\\"\\\" || templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] !== \\\"\\\") { footer.push({ showFooterLink: templateConfig[\\\"footerLink\\\" + label], label: templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] !== \\\"null\\\"? templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"]: \\\"\\\", linkUrl: templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] !== \\\"null\\\" ? templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"]: \\\"\\\" }); } } } footerObj.footer = footer; baseConfigurationAccordionTabs.push(footerObj); } else { baseConfigurationAccordionTabs = [{themeSelector:{}}, {}, {}, {}]; } tabsField.push({ \\\"baseConfigurationAccordionTabs\\\": baseConfigurationAccordionTabs}); tabsField.push({\\\"mailerPreview\\\": {}}); uiData.mailConfigAccordionTabs = [mailConfigAccordionTabs]; uiData.tabsField = tabsField; return JSON.stringify(uiData);}\"}'
WHERE (`id` = '47');

-- authorized url
UPDATE `self_serve`.`action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/nemo-client-${clientId}/accounts/${accountId}-account-default/urlfilterconfig/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { pageData = JSON.parse(pageData).authorisedUrls_p0; prefetch = JSON.parse(prefetch); var apiData = {}; apiData.accountId = pageData.accountId; apiData.scopeType = pageData.scopeType; apiData.scopeValue = pageData.scopeValue; apiData.urlFilterListingType = pageData.filterType; apiData.enabled = pageData.enabled == \\\"true\\\"; if (env === \\\"TEST\\\") { apiData.filterConfig = prefetch.enabledUrlsTest.filterConfig; apiData.key = prefetch.enabledUrlsTest.key; } else if (env === \\\"LIVE\\\") { apiData.filterConfig = prefetch.enabledUrlsLive.filterConfig; apiData.key = prefetch.enabledUrlsLive.key; } pageData.filterConfig.forEach(function(pageDataFilter) { urlId = pageDataFilter.urlFilterConfigId; if (urlId != undefined && urlId != \\\"\\\") { apiData.filterConfig.forEach(function(apiFilter) { if (urlId === apiFilter.urlFilterConfigId) { apiFilter.filterText = pageDataFilter.filterText; apiFilter.filterOptions = pageDataFilter.filterOptions; apiFilter.urlConfigDeleted = true; } }); } else { apiData.filterConfig.push({ urlFilterConfigId: pageData.key, filterText: pageDataFilter.filterText, filterOptions: pageDataFilter.filterOptions, urlConfigDeleted: true }); } }); return JSON.stringify(apiData) }\", \"preFetchDefinition\": { \"enabledUrlsLive\": { \"env\": \"LIVE\", \"fetchFor\": \"authorisedUrls_p0\", \"fetchType\": \"PAGE_DATA_VALUE\" }, \"enabledUrlsTest\": { \"env\": \"TEST\", \"fetchFor\": \"authorisedUrls_p0\", \"fetchType\": \"PAGE_DATA_VALUE\" } }, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '44');





