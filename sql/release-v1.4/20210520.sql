use `self_serve`;
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).updateTags_p0; var apiData = [ { \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityType\\\": \\\"tag\\\", \\\"entityId\\\": entityId, \\\"entityDisplayName\\\": uiData.tagName }, \\\"entityAttributes\\\": { \\\"tagName\\\": uiData.tagName, \\\"tagType\\\": uiData.tagType } } ]; if (env==\\\"LIVE\\\") { var pfd = JSON.parse(prefetch); var liveTags = pfd.liveTags; for(var i=0;i<liveTags.length; i++){ if(liveTags[i].label==uiData.tagName) {apiData[0].entityBaseData.entityId=liveTags[i].name; break;}} } return JSON.stringify(apiData); }\", \"preFetchDefinition\": { \"liveTags\": { \"env\": \"LIVE\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '2');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/create?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch,liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).createTeams_p0; var apiData = [{ \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId , \\\"entityType\\\": \\\"team\\\" }, \\\"entityAttributes\\\": { \\\"teamName\\\": uiData.teamName, \\\"accountId\\\":componentAccountId } }]; if (uiData.teamTags.join(\\\",\\\") !== \\\"\\\") { uiData.teamTags = updateTest2LiveTags(uiData.teamTags, env, prefetch); apiData[0].entityAttributes.tags = uiData.teamTags.join(\\\",\\\"); } return JSON.stringify(apiData); } function updateTest2LiveTags(tags, env, prefetch) {if (env == \\\"LIVE\\\") { var pfd = JSON.parse(prefetch); var liveTags = pfd.liveTags; var testTags = pfd.testTags; for (var l = 0; l < tags.length; l++) { var liveId = tags[l]; for (var i = 0; i < testTags.length; i++) { if ( testTags[i].name == tags[l]) { for (var j = 0; j < liveTags.length; j++) { if (testTags[i].label == liveTags[j].label) { liveId = liveTags[j].name; break; } } break; } } tags[l] = liveId; } } return tags} \", \"preFetchDefinition\": { \"liveTags\": { \"env\": \"LIVE\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" }, \"testTags\": { \"env\": \"TEST\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '4');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate( pageData, entityId,clientId , accountId, env, prefetch,liveEntityIdMap,componentClientId, componentAccountId){ var uiData= JSON.parse(pageData).updateTeams_p0; var apiData=[{\\\"entityBaseData\\\":{\\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId , \\\"entityType\\\": \\\"team\\\", \\\"entityId\\\": entityId },\\\"entityAttributes\\\": {\\\"teamName\\\": uiData.teamName, \\\"accountId\\\": componentAccountId }}]; if(uiData.teamTags.join(\\\",\\\")!==\\\"\\\"){ uiData.teamTags = updateTest2LiveTags(uiData.teamTags, env, prefetch); apiData[0].entityAttributes.tags=uiData.teamTags.join(\\\",\\\") }; return JSON.stringify(apiData);} function updateTest2LiveTags(tags, env, prefetch) {if (env == \\\"LIVE\\\") { var pfd = JSON.parse(prefetch); var liveTags = pfd.liveTags; var testTags = pfd.testTags; for (var l = 0; l < tags.length; l++) { var liveId = tags[l]; for (var i = 0; i < testTags.length; i++) { if ( testTags[i].name == tags[l]) { for (var j = 0; j < liveTags.length; j++) { if (testTags[i].label == liveTags[j].label) { liveId = liveTags[j].name; break; } } break; } } tags[l] = liveId; } } return tags} \", \"preFetchDefinition\": { \"liveTags\": { \"env\": \"LIVE\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" }, \"testTags\": { \"env\": \"TEST\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '5');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/create?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).createTags_p0; var apiData = [ { \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityType\\\": \\\"tag\\\", \\\"entityDisplayName\\\": uiData.tagName }, \\\"entityAttributes\\\": { \\\"tagName\\\": uiData.tagName, \\\"tagType\\\": uiData.tagType } }]; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null }' 
WHERE (`id` = '6');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).updateSkill_p0; var apiData = [ { \\\"entityBaseData\\\": { \\\"entityDisplayName\\\": uiData.skillName, \\\"entityId\\\": uiData.skillId, \\\"accountId\\\":componentAccountId , \\\"clientId\\\":componentClientId , \\\"entityType\\\": \\\"skill\\\" }, \\\"entityAttributes\\\": { \\\"skillName\\\": uiData.skillName, \\\"skillDesc\\\": uiData.skillDesc, \\\"account\\\": componentAccountId, \\\"users\\\": \\\"[]\\\" } } ]; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '8');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/create?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate( pageData, entityId, clientId, accountId, env ,prefetch, liveEntityIdMap,componentClientId, componentAccountId){ var uiData= JSON.parse(pageData).createSkills_p0; var apiData = [{\\\"entityBaseData\\\":{\\\"entityDisplayName\\\": uiData.skillName, \\\"entityId\\\":\\\"\\\", \\\"accountId\\\":componentAccountId , \\\"clientId\\\": componentClientId, \\\"entityType\\\": \\\"skill\\\" }, \\\"entityAttributes\\\": {\\\"skillName\\\": uiData.skillName, \\\"skillDesc\\\": uiData.skillDesc, \\\"account\\\":componentAccountId , \\\"users\\\":\\\"[]\\\" }}]; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '9');
UPDATE `action` SET `definition` = ' { \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/create?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).createQueues_p0.tabsField; var uiDataB = uiData[0]; var uiDataA = uiData[1]; var apiData = [ { \\\"entityAttributes\\\": { \\\"accountId\\\": componentAccountId, \\\"queueName\\\": uiDataB.queueName, \\\"queueDesc\\\": uiDataB.queueDesc, \\\"queueType\\\": uiDataA.assistConfig.queueType }, \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"entityType\\\": \\\"queue\\\" } } ]; if (uiDataB.queueTags && uiDataB.queueTags.join(\\\",\\\") !== \\\"\\\") { uiDataB.queueTags = updateTest2LiveTags(uiDataB.queueTags, env, prefetch); apiData[0].entityAttributes.tags = uiDataB.queueTags.join(\\\",\\\") }; return JSON.stringify(apiData);} function updateTest2LiveTags(tags, env, prefetch) {if (env == \\\"LIVE\\\") { var pfd = JSON.parse(prefetch); var liveTags = pfd.liveTags; var testTags = pfd.testTags; for (var l = 0; l < tags.length; l++) { var liveId = tags[l]; for (var i = 0; i < testTags.length; i++) { if ( testTags[i].name == tags[l]) { for (var j = 0; j < liveTags.length; j++) { if (testTags[i].label == liveTags[j].label) { liveId = liveTags[j].name; break; } } break; } } tags[l] = liveId; } } return tags} \", \"preFetchDefinition\": { \"liveTags\": { \"env\": \"LIVE\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" }, \"testTags\": { \"env\": \"TEST\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '12');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entity\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).updateQueues_p0.tabsField; var uiDataB = uiData[0]; var uiDataA = uiData[1].assistConfig; var apiData = [ { \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"entityType\\\": \\\"chatQueue\\\", \\\"entityId\\\": uiDataB.queueId, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"clientId\\\": clientId }, \\\"entityAttributes\\\": { \\\"queueLength\\\": uiDataA.queueLength, \\\"queueTimeOut\\\": uiDataA.queueTimeOut, \\\"resourceFree\\\": uiDataA.routeOn, \\\"conversationalInterval\\\": uiDataA.conversationalInterval, \\\"agentAffinityPeriod\\\": uiDataA.agentAffinityPeriod, \\\"visitorInactivityPeriod\\\": uiDataA.visitorInactivity, \\\"agentResponseTime\\\": uiDataA.agentResponse, \\\"typingEnabled\\\": uiDataA.typingEnabled == \\\"true\\\", \\\"typingTimeout\\\": uiDataA.typingTimeout, \\\"isAccountQueue\\\": uiDataA.isAccountQueue == \\\"true\\\", \\\"agentFTShare\\\": uiDataA.fileTransfer.FTVisitor, \\\"visitorMailerConfigKey\\\": uiDataA.mailer.visitorConfig, \\\"agentMailerConfigKey\\\": uiDataA.mailer.agentConfig, \\\"coViewEnabled\\\": uiDataA.coBrowse.coViewEnabled == \\\"true\\\", \\\"coBrowseEnabled\\\": uiDataA.coBrowse.coBrowseEnabled == \\\"true\\\", \\\"interLOBEnabled\\\": uiDataA.interLob.acceptInterLob == \\\"true\\\", \\\"isOutboundLOBQueueTransferEnabled\\\": uiDataA.interLob.outboundLob == \\\"true\\\", \\\"agentAffinityPeriod\\\": uiDataA.agentAffinityPeriod, \\\"conversationalInterval\\\": uiDataA.conversationalInterval, \\\"dispositionFormContent\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? \\\"\\\" : uiDataA.dispositionForm, \\\"crmScriptContent\\\": uiDataA.crmIntg.crmScriptContent, \\\"crmDisplayText\\\": uiDataA.crmIntg.crmLaunchBtn, \\\"crmAppId\\\": uiDataA.crmIntg.crmAppId, \\\"isStandardWrapUpRequired\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? true : (uiDataA.useStandardWrapUp == \\\"true\\\"), \\\"avgChatDuration\\\": \\\"10\\\", \\\"waitTimeBufferFactor\\\": \\\"1.0\\\", \\\"chatDurationRefreshFactor\\\": \\\"3.0\\\" } } ]; if (uiDataA.skill && uiDataA.skill.join(\\\",\\\") !== \\\"\\\") { apiData[0].entityAttributes.skill = uiDataA.skill.join(\\\",\\\") }; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null }' 
WHERE (`id` = '14');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"apikey\": \"D4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiDataB = JSON.parse(pageData).updateQueues_p0.tabsField[0]; var uiDataA = JSON.parse(pageData).updateQueues_p0.tabsField[1].assistConfig; var apiData = [ { \\\"entityAttributes\\\": { \\\"accountId\\\":componentAccountId , \\\"queueName\\\": uiDataB.queueName, \\\"queueDesc\\\": uiDataB.queueDesc, \\\"queueType\\\": uiDataA.queueType }, \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"entityType\\\": \\\"queue\\\", \\\"entityId\\\": uiDataB.queueId } } ]; if (uiDataB.queueTags && uiDataB.queueTags.join(\\\",\\\") !== \\\"\\\") { uiDataB.queueTags = updateTest2LiveTags(uiDataB.queueTags, env, prefetch); apiData[0].entityAttributes.tags = uiDataB.queueTags.join(\\\",\\\") }; return JSON.stringify(apiData);} function updateTest2LiveTags(tags, env, prefetch) {if (env == \\\"LIVE\\\") { var pfd = JSON.parse(prefetch); var liveTags = pfd.liveTags; var testTags = pfd.testTags; for (var l = 0; l < tags.length; l++) { var liveId = tags[l]; for (var i = 0; i < testTags.length; i++) { if ( testTags[i].name == tags[l]) { for (var j = 0; j < liveTags.length; j++) { if (testTags[i].label == liveTags[j].label) { liveId = liveTags[j].name; break; } } break; } } tags[l] = liveId; } } return tags} \", \"preFetchDefinition\": { \"liveTags\": { \"env\": \"LIVE\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" }, \"testTags\": { \"env\": \"TEST\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\" } } }' 
WHERE (`id` = '16');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { try{ var uiData = JSON.parse(pageData).STALive_p0; var ConfigMapper = uiData.ConfigMapper; var users = []; users = ConfigMapper.map(function (item) { var skillUser = item ? { userId: item.id, skillLevelId: uiData.skillId + \\\"-\\\" + (item.key ? item.key.toUpperCase() : \\\"HIGH\\\") } : null; return skillUser; }); var apiData = [ { \\\"entityBaseData\\\": { \\\"entityId\\\": uiData.skillId, \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityType\\\": \\\"skill\\\" }, \\\"entityAttributes\\\": { \\\"account\\\": componentAccountId, \\\"skillName\\\": uiData.skillName, \\\"skillDesc\\\": uiData.skillDesc, \\\"users\\\": JSON.stringify(users) } } ]; return JSON.stringify(apiData); } catch (e) {} return null; }\", \"preFetchDefinition\": null }'
WHERE (`id` = '17');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { try{ var uiData = JSON.parse(pageData).STATest_p0; var ConfigMapper = uiData.ConfigMapper; var users = []; users = ConfigMapper.map(function (item) { var skillUser = item ? { userId: item.id, skillLevelId: uiData.skillId + \\\"-\\\" + (item.key ? item.key.toUpperCase() : \\\"HIGH\\\") } : null; return skillUser; }); var apiData = [ { \\\"entityBaseData\\\": { \\\"entityId\\\": uiData.skillId, \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityType\\\": \\\"skill\\\" }, \\\"entityAttributes\\\": { \\\"account\\\": componentAccountId, \\\"skillName\\\": uiData.skillName, \\\"skillDesc\\\": uiData.skillDesc, \\\"users\\\": JSON.stringify(users) } } ]; return JSON.stringify(apiData); } catch (e) {} return null; }\", \"preFetchDefinition\": null, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '18');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entity\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).createQueues_p0.tabsField; var uiDataB = uiData[0]; var uiDataA = uiData[1].assistConfig; var apiData = [ { \\\"entityBaseData\\\": { \\\"accountId\\\":componentAccountId , \\\"entityType\\\": \\\"chatQueue\\\", \\\"entityId\\\": componentAccountId + \\\"-queue-\\\"+uiDataB.queueName, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"clientId\\\": clientId }, \\\"entityAttributes\\\": { \\\"queueLength\\\": uiDataA.queueLength||30, \\\"queueTimeOut\\\": uiDataA.queueTimeOut||600, \\\"resourceFree\\\": uiDataA.routeOn||\\\"DISPOSE\\\", \\\"visitorInactivityPeriod\\\": uiDataA.visitorInactivity, \\\"agentResponseTime\\\": uiDataA.agentResponse, \\\"typingEnabled\\\": uiDataA.typingEnabled == \\\"true\\\", \\\"typingTimeout\\\": uiDataA.typingTimeout, \\\"isAccountQueue\\\": uiDataA.isAccountQueue == \\\"true\\\", \\\"agentFTShare\\\": uiDataA.fileTransfer.FTVisitor, \\\"visitorMailerConfigKey\\\": uiDataA.mailer.visitorConfig, \\\"agentMailerConfigKey\\\": uiDataA.mailer.agentConfig, \\\"coViewEnabled\\\": uiDataA.coBrowse ? uiDataA.coBrowse.coViewEnabled == \\\"true\\\": false, \\\"coBrowseEnabled\\\": uiDataA.coBrowse ? uiDataA.coBrowse.coBrowseEnabled == \\\"true\\\": false, \\\"interLOBEnabled\\\": uiDataA.interLob.acceptInterLob == \\\"true\\\", \\\"isOutboundLOBQueueTransferEnabled\\\": uiDataA.interLob.outboundLob == \\\"true\\\", \\\"agentAffinityPeriod\\\": uiDataA.agentAffinityPeriod||180, \\\"conversationalInterval\\\": uiDataA.conversationalInterval||72, \\\"dispositionFormContent\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? \\\"\\\" : uiDataA.dispositionForm, \\\"crmScriptContent\\\": uiDataA.crmIntg.crmAppId? uiDataA.crmIntg.crmScriptContent: undefined, \\\"crmDisplayText\\\": uiDataA.crmIntg.crmAppId?uiDataA.crmIntg.crmLaunchBtn: undefined, \\\"crmAppId\\\": uiDataA.crmIntg.crmAppId?uiDataA.crmIntg.crmAppId : undefined, \\\"isStandardWrapUpRequired\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? true : (uiDataA.useStandardWrapUp == \\\"true\\\"), \\\"avgChatDuration\\\": \\\"10\\\", \\\"waitTimeBufferFactor\\\": \\\"1.0\\\", \\\"chatDurationRefreshFactor\\\": \\\"3.0\\\" } } ]; if (uiDataA.skill && uiDataA.skill.join(\\\",\\\") !== \\\"\\\") { apiData[0].entityAttributes.skill = uiDataA.skill.join(\\\",\\\") }; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '35');


UPDATE `fetch_config_template` SET `relativeurl` = '/en/admin/rest/ohs/listByAccount?entityType=skill&accountId=${componentAccountId}' 
WHERE (`id` = '10');

UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/propertyconfiguration?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var pageData = JSON.parse(pageData).createPropertyConfig_p0; var apiData = {}; if (pageData.scope.scopeType === \'account\') { apiData.scopeId = pageData.accountId; } else { apiData.scopeId = pageData.scope.queueScope; } apiData.scopeType = pageData.scope.scopeType; apiData.contextVariableBaseId = \\\"\\\"; apiData.varTypeLabel = \\\"\\\"; apiData.varName = pageData.varName; apiData.key = pageData.key; apiData.order = pageData.order; apiData.varType = pageData.varType; apiData.displayName = pageData.displayName; apiData.validatorId = pageData.validatorId; apiData.editableFlag = pageData.editableFlag; apiData.maskableFlag = pageData.maskableFlag; apiData.mandatoryFlag = pageData.mandatoryFlag; apiData.varDescription = pageData.varDescription; if (env == \\\"LIVE\\\") { var liveValidatorIds = JSON.parse(prefetch).liveValidators; var idList = []; for(var i=0;i<liveValidatorIds.length; i++){ idList.push(liveValidatorIds[i].name) } if (idList.indexOf(apiData.validatorId) == -1) { apiData.validatorId = \\\"\\\" } } return JSON.stringify(apiData) }\", \"preFetchDefinition\": { \"liveValidators\": { \"env\": \"LIVE\", \"fetchFor\": \"listPropertyValidation\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '27');











