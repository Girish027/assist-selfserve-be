use `self_serve`;

--single user create fix
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Referer\": \"https://test-default.portal.assist.staging.247-inc.net/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function(skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function(team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"preFetchDefinition\": {} }' 
WHERE (`id` = '36');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Referer\": \"https://test-default.portal.assist.staging.247-inc.net/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function(skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function(team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"preFetchDefinition\": {} }' 
WHERE (`id` = '38');

UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\n    \"objectTranslator\": \"function translate(apiData) { var uiData = { \\\"tabsField\\\": [{}, {}, {}] }; var u = JSON.parse(apiData).items; var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits != undefined ? u.activeChatLimits.toString() : 1; t0.autoAcceptChats = u.autoAcceptChats != undefined ? u.autoAcceptChats.toString() : \\\"true\\\"; t0.teamId = u.teamId; if (u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; if (u.authenticationType == \\\"REMOTE_AUTH\\\") { t0.samlUserName = u.samlUserName !== null ? u.samlUserName : \\\"\\\"; } t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper = {}; t1.ConfigMapper = u.skillLevels.map(function(sklvl) { var keywords = sklvl.skillLevelId.split(\\\"-\\\"); var key = keywords[keywords.length - 1].toUpperCase(); return ({ id: sklvl.skillId, name: sklvl.skillId, key: key }) }); var t2 = uiData.tabsField[2]; t2.ConfigMapper = {}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function(tId) { return ({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" }) }) : []; return JSON.stringify(uiData); }\"\n}'
 WHERE (`id` = '50');

UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{ \"objectTranslator\": \"function translate(apiData) { var uiData = { \\\"tabsField\\\": [{}, {}, {}] }; var u = JSON.parse(apiData).items; var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits != undefined ? u.activeChatLimits.toString() : 1; t0.autoAcceptChats = u.autoAcceptChats != undefined ? u.autoAcceptChats.toString() : \\\"true\\\"; t0.teamId = u.teamId; if (u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; if (u.authenticationType == \\\"REMOTE_AUTH\\\") { t0.samlUserName = u.samlUserName !== null ? u.samlUserName : \\\"\\\"; } t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper = {}; t1.ConfigMapper = u.skillLevels.map(function (sklvl) { var keywords = sklvl.skillLevelId.split(\\\"-\\\"); var key = keywords[keywords.length - 1].toUpperCase(); return ({ id: sklvl.skillId, name: sklvl.skillId, key: key }) }); var t2 = uiData.tabsField[2]; t2.ConfigMapper = {}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function (tId) { return ({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" }) }) : []; return JSON.stringify(uiData); } \" }' 
WHERE (`id` = '51');

-- mailer config fix
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/mailerconfig\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env) { pageData = JSON.parse(pageData).createMailer_p0; var templateConfigObj = {}; var apiData = {}; for (var i = 0; i < pageData.tabsField[0].baseConfigurationAccordionTabs.length; i++) { for (var key in pageData.tabsField[0].baseConfigurationAccordionTabs[i]) { templateConfigObj[key] = pageData.tabsField[0].baseConfigurationAccordionTabs[i][key]; } } var templateConfig = {}; templateConfig.header = templateConfigObj.extendedSubject; templateConfig.LogoURL = templateConfigObj.companyLogo; templateConfig.greetingMessage = templateConfigObj.greetings; templateConfig.signOffMessage = templateConfigObj.signOffMsg; templateConfig.signatureMessage = templateConfigObj.signatureText; templateConfig.headerMessage = templateConfigObj.message; templateConfig.c2CMessage = templateConfigObj.clickToChatMsg; templateConfig.c2CButtonURL = templateConfigObj.buttonUrl; templateConfig.c2CButtonText = templateConfigObj.buttonLabel; templateConfig.footerMessage = templateConfigObj.footer; templateConfig.logoThemeBtnCol = templateConfigObj.logoBackground; templateConfig.footerLinkOne = templateConfigObj.showFooter; templateConfig.footerLinkOneText = templateConfigObj.label; templateConfig.footerLinkOneURL = templateConfigObj.linlUrl; templateConfig.logoPosition = templateConfigObj.logoPosition; templateConfig.themeName = templateConfigObj.theme; templateConfig.themeBgCol = templateConfigObj.themeSelector.bgColor; templateConfig.themeLinkCol = templateConfigObj.themeSelector.linkColor; templateConfig.themeBtnCol = templateConfigObj.themeSelector.buttonColor; templateConfig.appendName = templateConfigObj.showCustomerName; templateConfig.appendClickToChat = templateConfigObj.showClick; templateConfig.appendSignOff = templateConfigObj.showSignOff; templateConfig.appendSignature = templateConfigObj.showSignature; templateConfig.contextDetailsText = \\\"null\\\"; var footer = templateConfigObj.footer; var labels = [\\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\"]; for (var i = 0; i < labels.length; i++) { var label = labels[i]; if (footer[i] !== undefined) { templateConfig[\\\"footer\\\" + label] = footer[i].showFooter; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = footer[i].label; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = footer[i].linkUrl; } else { templateConfig[\\\"footer\\\" + label] = false; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = \\\"\\\"; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = \\\"\\\"; } } templateConfig.footerMessage = templateConfigObj.footerMessage; templateConfig.appendAgentDetails = false; templateConfig.appendContextDetails = false; apiData.templateConfig = templateConfig; apiData.isSSL = pageData.mailConfigAccordionTabs[0].isSsl === \\\"true\\\"; apiData.bccId = pageData.mailConfigAccordionTabs[0].bccEmail; apiData.fromName = pageData.mailConfigAccordionTabs[0].fromName; apiData.smtpPort = pageData.mailConfigAccordionTabs[0].smtpPort; apiData.smtpHost = pageData.mailConfigAccordionTabs[0].smtpHost; apiData.key = pageData.mailConfigAccordionTabs[0].key; apiData.configKey = pageData.mailConfigAccordionTabs[0].configKey; apiData.debugEnabled = pageData.mailConfigAccordionTabs[0].debugEnable === \\\"true\\\"; apiData.fromEmail = pageData.mailConfigAccordionTabs[0].fromEmailId; apiData.mailSubject = pageData.mailConfigAccordionTabs[0].mailSubject; apiData.fromPassword = pageData.mailConfigAccordionTabs[0].fromPassword; apiData.clientId = \\\"nemo-client-\\\" + clientId; apiData.accountId = accountId + \\\"-account-default\\\"; apiData.mailOpeningLines = \\\"\\\"; apiData.mailSalutation = \\\"\\\"; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null }' 
WHERE (`id` = '32');

UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateMailer_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/mailerconfig/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateMailer_p0; var templateConfigObj = {}; var apiData = {}; for (var i = 0; i < pageData.tabsField[0].baseConfigurationAccordionTabs.length; i++) { for (var key in pageData.tabsField[0].baseConfigurationAccordionTabs[i]) { templateConfigObj[key] = pageData.tabsField[0].baseConfigurationAccordionTabs[i][key]; } } var templateConfig = {}; templateConfig.header = templateConfigObj.extendedSubject; templateConfig.LogoURL = templateConfigObj.companyLogo; templateConfig.greetingMessage = templateConfigObj.greetings; templateConfig.signOffMessage = templateConfigObj.signOffMsg; templateConfig.signatureMessage = templateConfigObj.signatureText; templateConfig.headerMessage = templateConfigObj.message; templateConfig.c2CMessage = templateConfigObj.clickToChatMsg; templateConfig.c2CButtonURL = templateConfigObj.buttonUrl; templateConfig.c2CButtonText = templateConfigObj.buttonLabel; templateConfig.logoThemeBtnCol = templateConfigObj.logoBackground; templateConfig.logoPosition = templateConfigObj.logoPosition; templateConfig.themeName = templateConfigObj.themeSelector.theme; templateConfig.themeBgCol = templateConfigObj.themeSelector.bgColor; templateConfig.themeLinkCol = templateConfigObj.themeSelector.linkColor; templateConfig.themeBtnCol = templateConfigObj.themeSelector.buttonColor; templateConfig.appendName = templateConfigObj.showCustomerName; templateConfig.appendClickToChat = templateConfigObj.showClick; templateConfig.appendSignOff = templateConfigObj.showSignOff; templateConfig.appendSignature = templateConfigObj.showSignature; templateConfig.contextDetailsText = \\\"null\\\"; var footer = templateConfigObj.footer; var labels = [\\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\"]; for (var i = 0; i < labels.length; i++) { var label = labels[i]; if (footer[i] !== undefined) { templateConfig[\\\"footer\\\" + label] = footer[i].showFooter; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = footer[i].label; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = footer[i].linkUrl; } else { templateConfig[\\\"footer\\\" + label] = false; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = \\\"\\\"; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = \\\"\\\"; } } templateConfig.footerMessage = templateConfigObj.footerMessage; templateConfig.appendAgentDetails = false; templateConfig.appendContextDetails = false; apiData.templateConfig = templateConfig; apiData.isSSL = pageData.mailConfigAccordionTabs[0].isSsl === \\\"true\\\"; apiData.bccId = pageData.mailConfigAccordionTabs[0].bccEmail; apiData.fromName = pageData.mailConfigAccordionTabs[0].fromName; apiData.smtpPort = pageData.mailConfigAccordionTabs[0].smtpPort; apiData.smtpHost = pageData.mailConfigAccordionTabs[0].smtpHost; apiData.configKey = pageData.mailConfigAccordionTabs[0].configKey; apiData.debugEnabled = pageData.mailConfigAccordionTabs[0].debugEnable === \\\"true\\\"; apiData.fromEmail = pageData.mailConfigAccordionTabs[0].fromEmailId; apiData.mailSubject = pageData.mailConfigAccordionTabs[0].mailSubject; apiData.fromPassword = pageData.mailConfigAccordionTabs[0].fromPassword; apiData.clientId = \\\"nemo-client-\\\" + clientId; apiData.accountId = accountId + \\\"-account-default\\\"; apiData.mailOpeningLines = \\\"\\\"; apiData.mailSalutation = \\\"\\\"; if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:apiData.configKey}, \\\"updateMailer_p0.key\\\"); if (key !== \\\"\\\") { apiData.key = key; } else { apiData.key = pageData.mailConfigAccordionTabs[0].key; } } else { apiData.key = pageData.mailConfigAccordionTabs[0].key; } return JSON.stringify(apiData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } }} return key; }\", \"preFetchDefinition\": { \"listLiveData\": { \"env\": \"LIVE\", \"fetchFor\": \"listMailerConfig\", \"fetchType\": \"ENTITY_LISTING\" } }, \"prefetchRequiredForLiveOnly\": true }' 
WHERE (`id` = '33');

