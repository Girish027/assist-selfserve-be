use self_serve;
/* CENTRAL-8047: Remove Pagination for non-paginated activities */
UPDATE `activity_template` SET `configs` = '{\"pageSize\": 100, \"subHeader\": {\"BULK\": {\"subHeaderTitle\": \"Create or update existing users\", \"subHeaderDescription\": \"To create or update one user, switch the bulk upload toggle to off.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"CREATE\": {\"subHeaderTitle\": \"Create or update existing users\", \"subHeaderDescription\": \"To create or update multiple users, switch the bulk upload toggle to on.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"UPDATE\": {}}, \"publishType\": \"LIVE_ONLY\", \"allowedActions\": {\"BULK\": [\"PUBLISH_TO_LIVE\", \"BULK_UPLOAD\"], \"CREATE\": [\"PUBLISH_TO_LIVE\", \"SAVE_AND_CLOSE\", \"EDIT\", \"BULK_UPLOAD\"], \"UPDATE\": [\"PUBLISH_TO_LIVE\", \"EDIT\", \"SAVE_AND_CLOSE\"]}, \"showSummaryFooter\": true, \"isPaginationEnabled\": true, \"preFetchInputValidation\": \"[^A-Za-z0-9-_ . ,:@]\"}' WHERE (`id` = 'userLive');
UPDATE `activity_template` SET `configs` = '{\"pageSize\": 100, \"subHeader\": {\"BULK\": {\"subHeaderTitle\": \"Create or update existing users\", \"subHeaderDescription\": \"To create or update one user, switch the bulk upload toggle to off.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"CREATE\": {\"subHeaderTitle\": \"Create or update existing users\", \"subHeaderDescription\": \"To create or update multiple users, switch the bulk upload toggle to on.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"UPDATE\": {}}, \"publishType\": \"TEST_ONLY\", \"allowedActions\": {\"BULK\": [\"PUBLISH_TO_TEST\", \"BULK_UPLOAD\"], \"CREATE\": [\"PUBLISH_TO_TEST\", \"SAVE_AND_CLOSE\", \"EDIT\", \"BULK_UPLOAD\"], \"UPDATE\": [\"PUBLISH_TO_TEST\", \"EDIT\", \"SAVE_AND_CLOSE\"]}, \"showSummaryFooter\": true, \"isPaginationEnabled\": false, \"preFetchInputValidation\": \"[^A-Za-z0-9-_ . ,:@]\"}' WHERE (`id` = 'userTest');

-- CENTRAL-8051 Update Queue and Team activities, retain the tags for each entity

UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(values){values=JSON.parse(JSON.parse(values).data.entity); var uiData = {}; uiData.teamId=values.entityBaseData.entityId; uiData.teamName=values.entityBaseData.entityDisplayName; var tags = values.entityAttributes.tags; uiData.teamTags=tags.length>0?values.entityAttributes.tags.split(\\\",\\\"):[]; return JSON.stringify(uiData);}\"}'
WHERE (`id` = '9');
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData) { var val = JSON.parse(JSON.parse(apiData).data.entity); var ea = val.entityAttributes; var ebd = val.entityBaseData; var uiData = { \\\"tabsField\\\": [ { \\\"queueList\\\": ebd.entityId, \\\"queueName\\\": ebd.entityDisplayName, \\\"queueId\\\": ebd.entityId, \\\"queueDesc\\\": ea.queueDesc, \\\"queueTags\\\": [] }, { \\\"assistConfig\\\": { \\\"queueType\\\": ea.queueType } } ] }; if (ea.tags && ea.tags.split(\\\",\\\") !== \\\"\\\") { uiData.tabsField[0].queueTags = ea.tags.split(\\\",\\\"); } return JSON.stringify(uiData); } \"}'
WHERE (`id` = '11');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"apikey\": \"D4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap, componentClientId, componentAccountId) { var uiDataB = JSON.parse(pageData).updateQueues_p0.tabsField[0]; var uiDataA = JSON.parse(pageData).updateQueues_p0.tabsField[1].assistConfig; var apiData = [{ \\\"entityAttributes\\\": { \\\"accountId\\\": componentAccountId, \\\"queueName\\\": uiDataB.queueName, \\\"queueDesc\\\": uiDataB.queueDesc, \\\"queueType\\\": uiDataA.queueType}, \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"entityType\\\": \\\"queue\\\", \\\"entityId\\\": uiDataB.queueId }}];if (uiDataB.queueTags.length > 0) { apiData[0].entityAttributes.tags = uiDataB.queueTags.join(\\\",\\\") };return JSON.stringify(apiData); }\", \"preFetchDefinition\": {\"liveTags\": {\"env\": \"LIVE\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\"}, \"testTags\": {\"env\": \"TEST\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\"}}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '16');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"apikey\": \"KtbDtdYYb7EUD4oajYCM8l9Nh7L0AgEc\", \"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"ohs\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/v1/ohs/adminEntity/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap, componentClientId, componentAccountId) {var uiData = JSON.parse(pageData).updateTeams_p0;var apiData = [{\\\"entityBaseData\\\": {\\\"accountId\\\": componentAccountId,\\\"clientId\\\": componentClientId,\\\"entityType\\\": \\\"team\\\",\\\"entityId\\\": entityId},\\\"entityAttributes\\\": {\\\"teamName\\\": uiData.teamName,\\\"accountId\\\": componentAccountId}}]; if(uiData.teamTags.length > 0) { apiData[0].entityAttributes.tags = uiData.teamTags.join(\\\",\\\") };return JSON.stringify(apiData);}\", \"preFetchDefinition\": {\"liveTags\": {\"env\": \"LIVE\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\"}, \"testTags\": {\"env\": \"TEST\", \"fetchFor\": \"listTag\", \"fetchType\": \"ENTITY_LISTING\"}}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}'
WHERE (`id` = '5');


-- Central- 7853: User friendly configuration of Agent Response time & Visitor Inactivity Time 

UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData, entity) { var val = JSON.parse(JSON.parse(apiData).data.entity); var ea = val.entityAttributes; var ebd = val.entityBaseData; var uiData = { \\\"tabsField\\\": [ {}, { \\\"assistConfig\\\": { \\\"useStandardWrapUp\\\": ea.isStandardWrapUpRequired? ea.isStandardWrapUpRequired.toString(): \\\"false\\\", \\\"skill\\\": [], \\\"queueTimeOut\\\": Number(ea.queueTimeOut), \\\"queueLength\\\": Number(ea.queueLength), \\\"routeOn\\\": ea.resourceFree, \\\"agentAffinityPeriod\\\": Number(ea.agentAffinityPeriod), \\\"conversationalInterval\\\": Number(ea.conversationalInterval),\\\"VisitorInactivityObj\\\": {\\\"visitorInactivityEnabled\\\": ea.visitorInactivityPeriod == \\\"-1\\\" ? \\\"false\\\" : \\\"true\\\" ,\\\"visitorInactivity\\\": ea.visitorInactivityPeriod == \\\"-1\\\" ? 180 : Number(ea.visitorInactivityPeriod)},\\\"AgentResponseObj\\\": {\\\"agentResponseEnabled\\\": ea.agentResponseTime == \\\"-1\\\" ? \\\"false\\\" : \\\"true\\\" ,\\\"agentResponse\\\": ea.agentResponseTime == \\\"-1\\\" ? 120 : Number(ea.agentResponseTime),},\\\"typingEnabled\\\": ea.typingEnabled ? ea.typingEnabled.toString() : \\\"false\\\", \\\"typingTimeout\\\": Number(ea.typingTimeout), \\\"isAccountQueue\\\": ea.isAccountQueue ? ea.isAccountQueue.toString(): \\\"false\\\", \\\"fileTransfer\\\": { \\\"FTVisitor\\\": ea.agentFTShare }, \\\"mailer\\\": { \\\"visitorConfig\\\": isUndefinedOrNull(ea.visitorMailerConfigKey), \\\"agentConfig\\\": isUndefinedOrNull(ea.agentMailerConfigKey) }, \\\"coBrowse\\\": { \\\"coBrowseEnabled\\\": ea.coBrowseEnabled ? ea.coBrowseEnabled.toString() : \\\"false\\\", \\\"coViewEnabled\\\": ea.coViewEnabled ? ea.coViewEnabled.toString() : \\\"false\\\" }, \\\"crmIntg\\\": { \\\"crmScriptContent\\\": ea.crmScriptContent, \\\"crmLaunchBtn\\\": ea.crmDisplayText, \\\"crmAppId\\\": ea.crmAppId }, \\\"interLob\\\": { \\\"outboundLob\\\": ea.isOutboundLOBQueueTransferEnabled ? ea.isOutboundLOBQueueTransferEnabled.toString() : \\\"false\\\", \\\"acceptInterLob\\\": ea.interLOBEnabled ? ea.interLOBEnabled.toString() : \\\"false\\\" } } }] }; if (ea.skill && ea.skill.split(\\\",\\\") !== \\\"\\\") { uiData.tabsField[1].assistConfig.skill = ea.skill.split(\\\",\\\"); }; return JSON.stringify(uiData); } function isUndefinedOrNull(obj) { if (obj === undefined || obj === null || obj === \\\"null\\\" || obj === NaN) { return undefined; } else return obj; }\"}'
WHERE (`id` = '12');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entity\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap, componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).createQueues_p0.tabsField; var uiDataB = uiData[0]; var uiDataA = uiData[1].assistConfig; var visitorInactivity = uiDataA.VisitorInactivityObj.visitorInactivity || 180; var agentResponse = uiDataA.AgentResponseObj.agentResponse || 120; var apiData = [{ \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"entityType\\\": \\\"chatQueue\\\", \\\"entityId\\\": componentAccountId + \\\"-queue-\\\" + uiDataB.queueName, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"clientId\\\": clientId }, \\\"entityAttributes\\\": { \\\"queueLength\\\": uiDataA.queueLength || 30, \\\"queueTimeOut\\\": uiDataA.queueTimeOut || 600, \\\"resourceFree\\\": uiDataA.routeOn || \\\"DISPOSE\\\", \\\"visitorInactivityPeriod\\\": (uiDataA.VisitorInactivityObj.visitorInactivityEnabled == \\\"true\\\" && visitorInactivity != 0 ) ? visitorInactivity : -1, \\\"agentResponseTime\\\": (uiDataA.AgentResponseObj.agentResponseEnabled == \\\"true\\\" && agentResponse != 0) ? agentResponse : -1, \\\"typingEnabled\\\": uiDataA.typingEnabled == \\\"true\\\", \\\"typingTimeout\\\": uiDataA.typingTimeout, \\\"isAccountQueue\\\": uiDataA.isAccountQueue == \\\"true\\\", \\\"agentFTShare\\\": uiDataA.fileTransfer.FTVisitor, \\\"visitorMailerConfigKey\\\": uiDataA.mailer.visitorConfig, \\\"agentMailerConfigKey\\\": uiDataA.mailer.agentConfig, \\\"coViewEnabled\\\": uiDataA.coBrowse ? uiDataA.coBrowse.coViewEnabled == \\\"true\\\" : false, \\\"coBrowseEnabled\\\": uiDataA.coBrowse ? uiDataA.coBrowse.coBrowseEnabled == \\\"true\\\" : false, \\\"interLOBEnabled\\\": uiDataA.interLob.acceptInterLob == \\\"true\\\", \\\"isOutboundLOBQueueTransferEnabled\\\": uiDataA.interLob.outboundLob == \\\"true\\\", \\\"agentAffinityPeriod\\\": uiDataA.agentAffinityPeriod || 180, \\\"conversationalInterval\\\": uiDataA.conversationalInterval || 72, \\\"dispositionFormContent\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? \\\"\\\" : uiDataA.dispositionForm, \\\"crmScriptContent\\\": uiDataA.crmIntg.crmAppId ? uiDataA.crmIntg.crmScriptContent : undefined, \\\"crmDisplayText\\\": uiDataA.crmIntg.crmAppId ? uiDataA.crmIntg.crmLaunchBtn : undefined, \\\"crmAppId\\\": uiDataA.crmIntg.crmAppId ? uiDataA.crmIntg.crmAppId : undefined, \\\"isStandardWrapUpRequired\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? true : (uiDataA.useStandardWrapUp == \\\"true\\\"), \\\"avgChatDuration\\\": \\\"10\\\", \\\"waitTimeBufferFactor\\\": \\\"1.0\\\", \\\"chatDurationRefreshFactor\\\": \\\"3.0\\\" } }]; if (uiDataA.skill && uiDataA.skill.join(\\\",\\\") !== \\\"\\\") { apiData[0].entityAttributes.skill = uiDataA.skill.join(\\\",\\\") }; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}'
WHERE (`id` = '35');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entity\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).updateQueues_p0.tabsField; var uiDataB = uiData[0]; var uiDataA = uiData[1].assistConfig; var apiData = [ { \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"entityType\\\": \\\"chatQueue\\\", \\\"entityId\\\": uiDataB.queueId, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"clientId\\\": clientId }, \\\"entityAttributes\\\": { \\\"queueLength\\\": uiDataA.queueLength, \\\"queueTimeOut\\\": uiDataA.queueTimeOut, \\\"resourceFree\\\": uiDataA.routeOn, \\\"conversationalInterval\\\": uiDataA.conversationalInterval, \\\"agentAffinityPeriod\\\": uiDataA.agentAffinityPeriod, \\\"visitorInactivityPeriod\\\": (uiDataA.VisitorInactivityObj.visitorInactivityEnabled == \\\"true\\\" && uiDataA.VisitorInactivityObj.visitorInactivity != 0) ? uiDataA.VisitorInactivityObj.visitorInactivity : -1,\\\"agentResponseTime\\\": (uiDataA.AgentResponseObj.agentResponseEnabled == \\\"true\\\" && uiDataA.AgentResponseObj.agentResponse != 0) ? uiDataA.AgentResponseObj.agentResponse : -1,\\\"typingEnabled\\\": uiDataA.typingEnabled == \\\"true\\\", \\\"typingTimeout\\\": uiDataA.typingTimeout, \\\"isAccountQueue\\\": uiDataA.isAccountQueue == \\\"true\\\", \\\"agentFTShare\\\": uiDataA.fileTransfer.FTVisitor, \\\"visitorMailerConfigKey\\\": uiDataA.mailer.visitorConfig, \\\"agentMailerConfigKey\\\": uiDataA.mailer.agentConfig, \\\"coViewEnabled\\\": uiDataA.coBrowse.coViewEnabled == \\\"true\\\", \\\"coBrowseEnabled\\\": uiDataA.coBrowse.coBrowseEnabled == \\\"true\\\", \\\"interLOBEnabled\\\": uiDataA.interLob.acceptInterLob == \\\"true\\\", \\\"isOutboundLOBQueueTransferEnabled\\\": uiDataA.interLob.outboundLob == \\\"true\\\", \\\"agentAffinityPeriod\\\": uiDataA.agentAffinityPeriod, \\\"conversationalInterval\\\": uiDataA.conversationalInterval, \\\"dispositionFormContent\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? \\\"\\\" : uiDataA.dispositionForm, \\\"crmScriptContent\\\": uiDataA.crmIntg.crmScriptContent, \\\"crmDisplayText\\\": uiDataA.crmIntg.crmLaunchBtn, \\\"crmAppId\\\": uiDataA.crmIntg.crmAppId, \\\"isStandardWrapUpRequired\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? true : (uiDataA.useStandardWrapUp == \\\"true\\\"), \\\"avgChatDuration\\\": \\\"10\\\", \\\"waitTimeBufferFactor\\\": \\\"1.0\\\", \\\"chatDurationRefreshFactor\\\": \\\"3.0\\\" } } ]; if (uiDataA.skill && uiDataA.skill.join(\\\",\\\") !== \\\"\\\") { apiData[0].entityAttributes.skill = uiDataA.skill.join(\\\",\\\") }; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}'
WHERE (`id` = '14');

-- CENTRAL #8050: Fixed Data Masking patterns error, Added encoding to match and replace patterns.

UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateMaskingPatterns_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/messagepolicy/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateMaskingPatterns_p0; if (pageData.scopeType === \\\"account\\\") { pageData.scopeId = pageData.accountScope; } else { pageData.scopeId = pageData.queueScope; } if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, {label:pageData.piiMaskName},\\\"updateMaskingPatterns_p0.key\\\" ); if (key !== \\\"\\\") { pageData.key = key; } }  var pageDataString =  JSON.stringify(pageData);  return encodeURIComponent(pageDataString);} function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null || liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } }else{ return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch , testEntity){ var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if(testEntity.secondaryLabel !== undefined){ if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel ) { key = listLiveData[i].name; break; } }else{ if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } }} return key; }\", \"urlParamsEncoded\": true, \"preFetchDefinition\": {\"listLiveData\": {\"env\": \"LIVE\", \"fetchFor\": \"listDataMaskingPattern\", \"fetchType\": \"ENTITY_LISTING\"}}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": true}'
WHERE (`id` = '28');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/messagepolicy?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env) { pageData = JSON.parse(pageData).createMaskingPatterns_p0; if(pageData.scopeType === \'account\'){pageData.scopeId =pageData.accountScope;}else{pageData.scopeId = pageData.queueScope;}  var pageDataString = JSON.stringify(pageData); return encodeURIComponent(pageDataString); }\", \"urlParamsEncoded\": true, \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}'
WHERE (`id` = '29');
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function decodeHTMLEntities(text){ var entities = { \\\"amp\\\": \\\"&\\\", \\\"apos\\\": \\\"\'\\\", \\\"#x27\\\": \\\"\'\\\", \\\"#x2F\\\": \\\"/\\\", \\\"#39\\\": \\\"\'\\\", \\\"#47\\\": \\\"/\\\", \\\"lt\\\": \\\"<\\\", \\\"gt\\\": \\\">\\\", \\\"nbsp\\\": \\\" \\\", \\\"quot\\\": \\\"\\\\\\\"\\\" }; for(var key in entities){ if(entities.hasOwnProperty(key)){ text = text.replace(new RegExp(\\\"&\\\"+ key +\\\";\\\", \\\"g\\\"), entities[key]); } } return text; } function translate(values){ values = JSON.parse(values)[0]; if(values.scopeType === \\\"queue\\\"){ values.queueScope = values.scopeId; }else{ values.accountScope = values.accountId; } values.enabled = values.enabled.toString(); values.matchPattern = decodeHTMLEntities(values.matchPattern); values.replacePattern = decodeHTMLEntities(values.replacePattern); return JSON.stringify(values) }\"}'
WHERE (`id` = '39');

-- CENTRAL #7850 Implement Serverside search for created user names

UPDATE `fetch_config_template` SET `params` = '{\"contexts\": [\"clientId\", \"accountId\", \"componentClientId\", \"componentAccountId\", \"pageNumber\", \"searchValue\"], \"constants\": {\"pageSize\": 100, \"pageNumber\": \"0\", \"searchValue\": \"\"}, \"queryParams\": {\"queryCriteria\": { \"filters\": [{\"value\": \"${searchValue}\", \"fieldName\": \"userName\", \"operation\": \"LIKE\"}], \"pageSize\": \"${pageSize}\", \"pageNumber\": \"${pageNumber}\"}}}'
WHERE (`id` = '55');

UPDATE `activity_template` SET `configs` = '{\"pageSize\": 100, \"subHeader\": {\"BULK\": {\"subHeaderTitle\": \"Create or Update existing Assist users in this screen.\", \"subHeaderDescription\": \"To create or update one user, switch the bulk upload toggle to off.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"CREATE\": {\"subHeaderTitle\": \"Create or Update existing Assist users in this screen.\", \"subHeaderDescription\": \"To create or update multiple users, switch the bulk upload toggle to on.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"UPDATE\": {}}, \"publishType\": \"TEST_ONLY\", \"allowedActions\": {\"BULK\": [\"PUBLISH_TO_TEST\", \"BULK_UPLOAD\"], \"CREATE\": [\"PUBLISH_TO_TEST\", \"SAVE_AND_CLOSE\", \"EDIT\", \"BULK_UPLOAD\"], \"UPDATE\": [\"PUBLISH_TO_TEST\", \"EDIT\", \"SAVE_AND_CLOSE\"]}, \"isPaginationEnabled\": true, \"isServerSearchEnabled\": true, \"showSummaryFooter\": true, \"preFetchInputValidation\": \"[^A-Za-z0-9-_ . ,:@]\"}'
WHERE (`id` = 'userTest');
UPDATE `activity_template` SET `configs` = '{\"pageSize\": 100, \"subHeader\": {\"BULK\": {\"subHeaderTitle\": \"Create or Update existing Assist users in this screen.\", \"subHeaderDescription\": \"To create or update one user, switch the bulk upload toggle to off.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"CREATE\": {\"subHeaderTitle\": \"Create or Update existing Assist users in this screen.\", \"subHeaderDescription\": \"To create or update multiple users, switch the bulk upload toggle to on.\", \"allowedSubHeaderActions\": [\"BULK_UPLOAD\"]}, \"UPDATE\": {}}, \"publishType\": \"LIVE_ONLY\", \"allowedActions\": {\"BULK\": [\"PUBLISH_TO_LIVE\", \"BULK_UPLOAD\"], \"CREATE\": [\"PUBLISH_TO_LIVE\", \"SAVE_AND_CLOSE\", \"EDIT\", \"BULK_UPLOAD\"], \"UPDATE\": [\"PUBLISH_TO_LIVE\", \"EDIT\", \"SAVE_AND_CLOSE\"]}, \"isPaginationEnabled\": true, \"isServerSearchEnabled\": true, \"showSummaryFooter\": true, \"preFetchInputValidation\": \"[^A-Za-z0-9-_ . ,:@]\"}'
WHERE (`id` = 'userLive');

-- CENTRAL-7949: Disabling outbound entities and handling outbound account configs

UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(values, entity, context, auxResponse){ values = JSON.parse(values); var items = values.data.items; var entities = []; try { var auxResp = JSON.parse(auxResponse); var labelState = (auxResp.outboundEnabled === \\\"false\\\") ? \\\"DISABLED\\\" : \\\"ACTIVE\\\"; items.forEach( function(item){ if(item.varType === \\\"outbound\\\"){ entities.push({name:item.key, label:item.varName, secondaryLabel: item.varTypeLabel, secondaryLabelState: labelState, labelState: labelState}); } else entities.push({name:item.key, label:item.varName, secondaryLabel: item.varTypeLabel, secondaryLabelState: \\\"ACTIVE\\\", labelState:\\\"ACTIVE\\\"}); }) } catch(e){ return e.message; } return JSON.stringify(entities); }\"}', `execution_order` = '1'
WHERE (`id` = '36');

UPDATE `activity_template` SET `ui_schema` = '{\"icon\": \"\",\"toolTip\": \"\",\"dashboard\": true,\"menuGroupName\": \"nav\",\"displayOrder\": 0, \"uiOptions\": { \"entityList\": { \"entityItem\": { \"styles\": { \"label\": { \"DISABLED\": { \"color\": \"#cacfd4\" } }, \"secondaryLabel\": { \"DISABLED\": { \"color\": \"#cacfd4\" } } } }, \"entityHeader\": { \"label\": \"Name\", \"secondaryLabel\": \"Context Panel\" } } }, \"active\": false }', `configs` = '{\"subHeader\": null, \"publishType\": \"DEFAULT\", \"allowedActions\": null, \"objectTranslator\": \"function disableActionButtons(formData) { try {if(formData !== undefined) {return ((formData.outboundEnabled === \\\"false\\\") && (formData.varType === \\\"outbound\\\"))} else return false; } catch(error) { return false;}}\", \"fetchPageTemplateFromBE\": false, \"preFetchInputValidation\": null, \"canDisabledEntitiesPerformActions\": false}'
WHERE (`id` = 'propertyConfig');

-- CENTRAL #8004: Implementation of status polling for smart responses with api response code mappings - 06/08/2021
-- Update the scripts with proper error messages
UPDATE `action` SET `response_definition` = '{\"entityResponseTranslator\": \"var smartAgentsErrorMessages={\\\"SmartResponseError_1\\\":\\\"Something went wrong while Uploading! please try after sometime.\\\",\\\"SmartResponseError_2\\\":\\\"Something went wrong while deleting. Please try after sometime or contact Administrator if problem persists\\\",\\\"SmartResponseError_3\\\":\\\"Something went wrong while fetching!\\\",\\\"SmartResponseError_4\\\":\\\"Something went wrong while fetching Result! please try after sometime\\\",\\\"SmartResponseError_5\\\":\\\"Unknown Error!\\\",\\\"SmartResponseError_6\\\":\\\"Something Went wrong please check your file and try again later!\\\",\\\"SmartResponseError_7\\\":\\\"Job Timed Out! Please upload again\\\",\\\"SmartResponseError_8\\\":\\\"Excel header missing \'Response Text\'\\\",\\\"SmartResponseError_9\\\":\\\"Excel header missing \'Tags\'\\\",\\\"SmartResponseError_10\\\":\\\"Excel header missing \'Scope Type\'\\\",\\\"SmartResponseError_11\\\":\\\"Excel header missing \'Scope Id\'\\\",\\\"SmartResponseError_12\\\":\\\"Excel header has \'Response Title\' and \'Tags\'! only Tags are allowed\\\",\\\"SmartResponseError_13\\\":\\\"Account Id cannot be Empty\\\",\\\"SmartResponseError_14\\\":\\\"Scope cannot be Empty\\\",\\\"SmartResponseError_15\\\":\\\"Scope Id cannot be Empty\\\",\\\"SmartResponseError_16\\\":\\\"Response Text cannot be Empty\\\",\\\"SmartResponseError_17\\\":\\\"Tags cannot be Empty\\\",\\\"SmartResponseError_18\\\":\\\"Only \'Account\' or \'Queue\' Scope is allowed\\\",\\\"SmartResponseError_19\\\":\\\"Tags Length cannot be more then 64 Characters\\\",\\\"SmartResponseError_20\\\":\\\"DB Connection issue\\\"};var ApiResponse = function(_status, _message){ this.status = _status; this.message = _message; }; function translate(result) { var htmlTags = [\\\"<html>\\\", \\\"</html>\\\", \\\"<body>\\\", \\\"</body>\\\", \\\"<textarea>\\\", \\\"</textarea>\\\"]; var resp = result; try { for(var i = 0; i < htmlTags.length; i++) { resp = resp.replace(htmlTags[i], \\\"\\\"); } var jsonRes = JSON.parse(resp); if(!jsonRes.success){ var errorList = []; jsonRes.responseList.forEach(function(current){errorList.push(smartAgentsErrorMessages[current])});  return new ApiResponse(\\\"ERROR\\\", errorList.toString() + \\\" Please check the excel file.\\\");} return new ApiResponse(\\\"SUCCESS\\\", \\\"Successfully Scheduled file upload at \\\" + Date.now()); } catch(error) { return new ApiResponse(\\\"Error\\\", \\\"Failed to publish activity! Please try again or contact the Administrator, if the issue persists!\\\");}}\"}'
WHERE (`id` = '47');
UPDATE `action` SET `response_definition` = '{\"entityResponseTranslator\": \"var smartAgentsErrorMessages = {\\\"SmartResponseError_1\\\":\\\"Something went wrong while Uploading! please try after sometime.\\\",\\\"SmartResponseError_2\\\":\\\"Someting went wrong while deleting. Please try after sometime or contact Administrator if problem persist\\\",\\\"SmartResponseError_3\\\":\\\"Something went wrong while fetching!\\\",\\\"SmartResponseError_4\\\":\\\"Something went wrong while fetching Result! please try after sometime\\\",\\\"SmartResponseError_5\\\":\\\"Unkonwn Error!\\\",\\\"SmartResponseError_6\\\":\\\"Something Went wrong please check your file and try again later!\\\",\\\"SmartResponseError_7\\\":\\\"Job Timed Out! Please upload again\\\",\\\"SmartResponseError_8\\\":\\\"Excel header missing \'Response Text\'\\\",\\\"SmartResponseError_9\\\":\\\"Excel header missing \'Tags\'\\\",\\\"SmartResponseError_10\\\":\\\"Excel header missing \'Scope Type\'\\\",\\\"SmartResponseError_11\\\":\\\"Excel header missing \'Scope Id\'\\\",\\\"SmartResponseError_12\\\":\\\"Excel header has \'Response Title\' and \'Tags\'! only Tags are allowed\\\",\\\"SmartResponseError_13\\\":\\\"Account Id cannot be Empty\\\",\\\"SmartResponseError_14\\\":\\\"Scope cannot be Empty\\\",\\\"SmartResponseError_15\\\":\\\"Scope Id cannot be Empty\\\",\\\"SmartResponseError_16\\\":\\\"Response Text cannot be Empty\\\",\\\"SmartResponseError_17\\\":\\\"Tags cannot be Empty\\\",\\\"SmartResponseError_18\\\":\\\"Only \'Account\' or \'Queue\' Scope allowed\\\",\\\"SmartResponseError_19\\\":\\\"Tags Length cannot be more then 64 Characters\\\",\\\"SmartResponseError_20\\\":\\\"DB Connection issue\\\"}; var ApiResponse = function(_status, _message) { this.status = _status; this.message = _message; }; function translate(responseData) { try { var response = JSON.parse(responseData); if (response.success) { return new ApiResponse(\\\"SUCCESS\\\", \\\"Successfully uploaded smart responses\\\"); } else if (response.responseList.indexOf (\\\"SCHEDULED\\\") === -1 && response.responseList.indexOf(\\\"INPROGRESS\\\") === -1) { var errorList = []; response.responseList.forEach(function(current){errorList.push(smartAgentsErrorMessages[current])}); return new ApiResponse(\\\"ERROR_STOP\\\", errorList.toString() + \\\" Please check the excel file.\\\"); } else return new ApiResponse(\\\"ERROR\\\", \\\"The job is \\\" + response.responseList[0]); } catch (e) { return new ApiResponse(\\\"ERROR_STOP\\\", \\\"Failed to publish activity! Please try again or contact the Administrator, if the issue persists!\\\"); } }\"}'
WHERE (`id` = '56');

-- Fix action acripts

UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"https://test-default.portal.assist.staging.247-inc.net/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '36');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var apiData = {\\\"clientId\\\": \\\"nemo-client-\\\"+clientId,\\\"userName\\\": t0.userName,\\\"firstName\\\":t0.firstName,\\\"lastName\\\":t0.lastName,\\\"displayName\\\":t0.displayName,\\\"email\\\":t0.email,\\\"activeChatLimits\\\":t0.activeChatLimits,\\\"autoAcceptChats\\\":t0.autoAcceptChats,\\\"teamId\\\":t0.teamId,\\\"timezone\\\":\\\"GMT0\\\",\\\"roleIds\\\":roles,\\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\",\\\"status\\\":t0.status,\\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\",\\\"key\\\":t0.key,\\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId:skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; })||[],\\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){return ({teamId: team.id})})||[],\\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '37');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"https://test-default.portal.assist.staging.247-inc.net/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function(skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function(team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '38');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var apiData = {\\\"clientId\\\": \\\"nemo-client-\\\"+clientId,\\\"userName\\\": t0.userName,\\\"firstName\\\":t0.firstName,\\\"lastName\\\":t0.lastName,\\\"displayName\\\":t0.displayName,\\\"email\\\":t0.email,\\\"activeChatLimits\\\":t0.activeChatLimits,\\\"autoAcceptChats\\\":t0.autoAcceptChats,\\\"teamId\\\":t0.teamId,\\\"timezone\\\":\\\"GMT0\\\",\\\"roleIds\\\":roles,\\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\",\\\"status\\\":t0.status,\\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\",\\\"key\\\":t0.key,\\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId:skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; })||[],\\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){return ({teamId: team.id})})||[],\\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '39');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateMaskingPatterns_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/messagepolicy/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) {  pageData = JSON.parse(pageData).updateMaskingPatterns_p0; if (pageData.scopeType === \\\"account\\\") {  pageData.scopeId = pageData.accountScope; }  else {  pageData.scopeId = pageData.queueScope; }  if (env === \\\"LIVE\\\") {  var key = getLiveKey(prefetch, liveEntityIdMap, {label: pageData.piiMaskName}, \\\"updateMaskingPatterns_p0.key\\\"); if (key !== \\\"\\\") {  pageData.key = key; } }  var pageDataString = JSON.stringify(pageData); return encodeURIComponent(pageDataString); }  function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) {  if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) {  var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) {  return liveEntityId[liveEntityIdKey]; }  else {  return getLiveKeyFromPrefetch(prefetch, testEntity); }  } else {  return getLiveKeyFromPrefetch(prefetch, testEntity); }  }  function getLiveKeyFromPrefetch(prefetch, testEntity) {  var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) {  if (testEntity.secondaryLabel !== undefined) {  if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel) {  key = listLiveData[i].name; break; }  } else {  if (listLiveData[i].label === testEntity.label) {  key = listLiveData[i].name; break; }  }  }  return key; } \", \"urlParamsEncoded\": true, \"preFetchDefinition\": {\"listLiveData\": {\"env\": \"LIVE\", \"fetchFor\": \"listDataMaskingPattern\", \"fetchType\": \"ENTITY_LISTING\"}}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": true}'
WHERE (`id` = '28');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updatePropertyValidation_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/validator/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { var apiData = JSON.parse(pageData).updatePropertyValidation_p0; if (!apiData.validatorRule) { apiData.validatorRule = \\\"\\\"; } if (!apiData.enumValues || apiData.enumValues.length == 0) { apiData.enumValues = [\\\"\\\"]; } if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, { label: pageData.validatorName }, \\\"updatePropertyValidation_p0.key\\\"); if (key !== \\\"\\\") { apiData.key = key; } } return JSON.stringify(apiData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch, testEntity) { var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if (testEntity.secondaryLabel !== undefined) { if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel) { key = listLiveData[i].name; break; } } else { if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } } } return key; }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {\"listLiveData\": {\"env\": \"LIVE\", \"fetchFor\": \"listPropertyValidations\", \"fetchType\": \"ENTITY_LISTING\"}}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": true}' 
WHERE (`id` = '42');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/mailerconfig\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env) { pageData = JSON.parse(pageData).createMailer_p0; var templateConfigObj = {}; var apiData = {}; for (var i = 0; i < pageData.tabsField[0].baseConfigurationAccordionTabs.length; i++) { for (var key in pageData.tabsField[0].baseConfigurationAccordionTabs[i]) { templateConfigObj[key] = pageData.tabsField[0].baseConfigurationAccordionTabs[i][key]; } } var templateConfig = {}; templateConfig.header = templateConfigObj.extendedSubject; templateConfig.LogoURL = templateConfigObj.companyLogo; templateConfig.greetingMessage = templateConfigObj.greetings; templateConfig.signOffMessage = templateConfigObj.signOffMsg; templateConfig.signatureMessage = templateConfigObj.signatureText; templateConfig.headerMessage = templateConfigObj.message; templateConfig.c2CMessage = templateConfigObj.clickToChatMsg; templateConfig.c2CButtonURL = templateConfigObj.buttonUrl; templateConfig.c2CButtonText = templateConfigObj.buttonLabel; templateConfig.logoThemeBtnCol = templateConfigObj.logoBackground; templateConfig.logoPosition = templateConfigObj.logoPosition; templateConfig.themeName = templateConfigObj.themeSelector.theme; templateConfig.themeBgCol = templateConfigObj.themeSelector.bgColor; templateConfig.themeLinkCol = templateConfigObj.themeSelector.linkColor; templateConfig.themeBtnCol = templateConfigObj.themeSelector.buttonColor; templateConfig.appendName = templateConfigObj.showCustomerName; templateConfig.appendClickToChat = templateConfigObj.showClick; templateConfig.appendSignOff = templateConfigObj.showSignOff; templateConfig.appendSignature = templateConfigObj.showSignature; templateConfig.contextDetailsText = \\\"null\\\"; var footer = templateConfigObj.footer; var labels = [\\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\"]; for (var i = 0; i < labels.length; i++) { var label = labels[i]; if (footer[i] !== undefined) { templateConfig[\\\"footer\\\" + label] = footer[i].showFooterLink; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = footer[i].label; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = footer[i].linkUrl; } else { templateConfig[\\\"footer\\\" + label] = false; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = \\\"\\\"; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = \\\"\\\"; } } templateConfig.footerMessage = templateConfigObj.footerMessage; templateConfig.appendAgentDetails = false; templateConfig.appendContextDetails = false; apiData.templateConfig = templateConfig; apiData.isSSL = pageData.mailConfigAccordionTabs[0].isSsl === \\\"true\\\"; apiData.bccId = pageData.mailConfigAccordionTabs[0].bccEmail; apiData.fromName = pageData.mailConfigAccordionTabs[0].fromName; apiData.smtpPort = pageData.mailConfigAccordionTabs[0].smtpPort; apiData.smtpHost = pageData.mailConfigAccordionTabs[0].smtpHost; apiData.key = pageData.mailConfigAccordionTabs[0].key; apiData.configKey = pageData.mailConfigAccordionTabs[0].configKey; apiData.debugEnabled = pageData.mailConfigAccordionTabs[0].debugEnable === \\\"true\\\"; apiData.fromEmail = pageData.mailConfigAccordionTabs[0].fromEmailId; apiData.mailSubject = pageData.mailConfigAccordionTabs[0].mailSubject; apiData.fromPassword = pageData.mailConfigAccordionTabs[0].fromPassword; apiData.clientId = \\\"nemo-client-\\\" + clientId; apiData.accountId = accountId + \\\"-account-default\\\"; apiData.mailOpeningLines = \\\"\\\"; apiData.mailSalutation = \\\"\\\"; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '32');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": \"updateMailer_p0.key\", \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/mailerconfig/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": true, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap) { pageData = JSON.parse(pageData).updateMailer_p0; var templateConfigObj = {}; var apiData = {}; for (var i = 0; i < pageData.tabsField[0].baseConfigurationAccordionTabs.length; i++) { for (var key in pageData.tabsField[0].baseConfigurationAccordionTabs[i]) { templateConfigObj[key] = pageData.tabsField[0].baseConfigurationAccordionTabs[i][key]; } } var templateConfig = {}; templateConfig.header = templateConfigObj.extendedSubject; templateConfig.LogoURL = templateConfigObj.companyLogo; templateConfig.greetingMessage = templateConfigObj.greetings; templateConfig.signOffMessage = templateConfigObj.signOffMsg; templateConfig.signatureMessage = templateConfigObj.signatureText; templateConfig.headerMessage = templateConfigObj.message; templateConfig.c2CMessage = templateConfigObj.clickToChatMsg; templateConfig.c2CButtonURL = templateConfigObj.buttonUrl; templateConfig.c2CButtonText = templateConfigObj.buttonLabel; templateConfig.logoThemeBtnCol = templateConfigObj.logoBackground; templateConfig.logoPosition = templateConfigObj.logoPosition; templateConfig.themeName = templateConfigObj.themeSelector.theme; templateConfig.themeBgCol = templateConfigObj.themeSelector.bgColor; templateConfig.themeLinkCol = templateConfigObj.themeSelector.linkColor; templateConfig.themeBtnCol = templateConfigObj.themeSelector.buttonColor; templateConfig.appendName = templateConfigObj.showCustomerName; templateConfig.appendClickToChat = templateConfigObj.showClick; templateConfig.appendSignOff = templateConfigObj.showSignOff; templateConfig.appendSignature = templateConfigObj.showSignature; templateConfig.contextDetailsText = \\\"null\\\"; var footer = templateConfigObj.footer; var labels = [\\\"One\\\", \\\"Two\\\", \\\"Three\\\", \\\"Four\\\", \\\"Five\\\"]; for (var i = 0; i < labels.length; i++) { var label = labels[i]; if (footer[i] !== undefined) { templateConfig[\\\"footer\\\" + label] = footer[i].showFooterLink; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = footer[i].label; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = footer[i].linkUrl; } else { templateConfig[\\\"footer\\\" + label] = false; templateConfig[\\\"footerLink\\\" + label + \\\"Text\\\"] = \\\"\\\"; templateConfig[\\\"footerLink\\\" + label + \\\"URL\\\"] = \\\"\\\"; } } templateConfig.footerMessage = templateConfigObj.footerMessage; templateConfig.appendAgentDetails = false; templateConfig.appendContextDetails = false; apiData.templateConfig = templateConfig; apiData.isSSL = pageData.mailConfigAccordionTabs[0].isSsl === \\\"true\\\"; apiData.bccId = pageData.mailConfigAccordionTabs[0].bccEmail; apiData.fromName = pageData.mailConfigAccordionTabs[0].fromName; apiData.smtpPort = pageData.mailConfigAccordionTabs[0].smtpPort; apiData.smtpHost = pageData.mailConfigAccordionTabs[0].smtpHost; apiData.configKey = pageData.mailConfigAccordionTabs[0].configKey; apiData.debugEnabled = pageData.mailConfigAccordionTabs[0].debugEnable === \\\"true\\\"; apiData.fromEmail = pageData.mailConfigAccordionTabs[0].fromEmailId; apiData.mailSubject = pageData.mailConfigAccordionTabs[0].mailSubject; apiData.fromPassword = pageData.mailConfigAccordionTabs[0].fromPassword; apiData.clientId = \\\"nemo-client-\\\" + clientId; apiData.accountId = accountId + \\\"-account-default\\\"; apiData.mailOpeningLines = \\\"\\\"; apiData.mailSalutation = \\\"\\\"; if (env === \\\"LIVE\\\") { var key = getLiveKey(prefetch, liveEntityIdMap, { label: apiData.configKey }, \\\"updateMailer_p0.key\\\"); if (key !== \\\"\\\") { apiData.key = key; } else { apiData.key = pageData.mailConfigAccordionTabs[0].key; } } else { apiData.key = pageData.mailConfigAccordionTabs[0].key; } return JSON.stringify(apiData); } function getLiveKey(prefetch, liveEntityIdMap, testEntity, liveEntityIdKey) { if (liveEntityIdMap !== null && liveEntityIdMap !== undefined) { var liveEntityId = JSON.parse(liveEntityIdMap); if (Object.keys(liveEntityId).length !== 0) { return liveEntityId[liveEntityIdKey]; } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } } else { return getLiveKeyFromPrefetch(prefetch, testEntity); } } function getLiveKeyFromPrefetch(prefetch, testEntity) { var listLiveData = JSON.parse(prefetch).listLiveData; var key = \\\"\\\"; for (var i = 0; i < listLiveData.length; i++) { if (testEntity.secondaryLabel !== undefined) { if (listLiveData[i].label === testEntity.label && listLiveData[i].secondaryLabel === testEntity.secondaryLabel) { key = listLiveData[i].name; break; } } else { if (listLiveData[i].label === testEntity.label) { key = listLiveData[i].name; break; } } } return key; }\", \"preFetchDefinition\": {\"listLiveData\": {\"env\": \"LIVE\", \"fetchFor\": \"listMailerConfig\", \"fetchType\": \"ENTITY_LISTING\"}}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": true}' 
WHERE (`id` = '33');


-- Queue id changes for assist, invite management create

UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entity\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap, componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).createQueues_p0.tabsField; var uiDataB = uiData[0]; var uiDataA = uiData[1].assistConfig; var visitorInactivity = uiDataA.VisitorInactivityObj.visitorInactivity || 180; var agentResponse = uiDataA.AgentResponseObj.agentResponse || 120; var queueId = getQueueId(uiDataB.queueName, componentAccountId); var apiData = [{ \\\"entityBaseData\\\": { \\\"accountId\\\": componentAccountId, \\\"entityType\\\": \\\"chatQueue\\\", \\\"entityId\\\": queueId, \\\"entityDisplayName\\\": uiDataB.queueName, \\\"clientId\\\": clientId }, \\\"entityAttributes\\\": { \\\"queueLength\\\": uiDataA.queueLength || 30, \\\"queueTimeOut\\\": uiDataA.queueTimeOut || 600, \\\"resourceFree\\\": uiDataA.routeOn || \\\"DISPOSE\\\", \\\"visitorInactivityPeriod\\\": (uiDataA.VisitorInactivityObj.visitorInactivityEnabled == \\\"true\\\" && visitorInactivity != 0) ? visitorInactivity : -1, \\\"agentResponseTime\\\": (uiDataA.AgentResponseObj.agentResponseEnabled == \\\"true\\\" && agentResponse != 0) ? agentResponse : -1, \\\"typingEnabled\\\": uiDataA.typingEnabled == \\\"true\\\", \\\"typingTimeout\\\": uiDataA.typingTimeout, \\\"isAccountQueue\\\": uiDataA.isAccountQueue == \\\"true\\\", \\\"agentFTShare\\\": uiDataA.fileTransfer.FTVisitor, \\\"visitorMailerConfigKey\\\": uiDataA.mailer.visitorConfig, \\\"agentMailerConfigKey\\\": uiDataA.mailer.agentConfig, \\\"coViewEnabled\\\": uiDataA.coBrowse ? uiDataA.coBrowse.coViewEnabled == \\\"true\\\" : false, \\\"coBrowseEnabled\\\": uiDataA.coBrowse ? uiDataA.coBrowse.coBrowseEnabled == \\\"true\\\" : false, \\\"interLOBEnabled\\\": uiDataA.interLob.acceptInterLob == \\\"true\\\", \\\"isOutboundLOBQueueTransferEnabled\\\": uiDataA.interLob.outboundLob == \\\"true\\\", \\\"agentAffinityPeriod\\\": uiDataA.agentAffinityPeriod || 180, \\\"conversationalInterval\\\": uiDataA.conversationalInterval || 72, \\\"dispositionFormContent\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? \\\"\\\" : uiDataA.dispositionForm, \\\"crmScriptContent\\\": uiDataA.crmIntg.crmAppId ? uiDataA.crmIntg.crmScriptContent : undefined, \\\"crmDisplayText\\\": uiDataA.crmIntg.crmAppId ? uiDataA.crmIntg.crmLaunchBtn : undefined, \\\"crmAppId\\\": uiDataA.crmIntg.crmAppId ? uiDataA.crmIntg.crmAppId : undefined, \\\"isStandardWrapUpRequired\\\": uiDataA.queueType === \\\"MESSAGING\\\" ? true : (uiDataA.useStandardWrapUp == \\\"true\\\"), \\\"avgChatDuration\\\": \\\"10\\\", \\\"waitTimeBufferFactor\\\": \\\"1.0\\\", \\\"chatDurationRefreshFactor\\\": \\\"3.0\\\" } }]; if (uiDataA.skill && uiDataA.skill.join(\\\",\\\") !== \\\"\\\") { apiData[0].entityAttributes.skill = uiDataA.skill.join(\\\",\\\"); }; return JSON.stringify(apiData); } function getQueueId(queueName, accountId) { var arr = queueName.toLowerCase().split(\\\" \\\"); var idArr = []; for (var i = 0; i < arr.length; i++) { if (arr[i] != \\\"\\\") { idArr.push(arr[i]); }; }; return accountId + \\\"-queue-\\\" + idArr.join(\\\"-\\\"); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '35');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/invitemanagement/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch, liveEntityIdMap, componentClientId, componentAccountId) { var uiData = JSON.parse(pageData).createQueues_p0.tabsField; var uiDataB = uiData[0]; var uiDataA = uiData[1].assistConfig; var apiData = [{ queueName: uiDataB.queueName, queueDescription: uiDataB.queueDesc, acceptanceRate: uiDataA.inviteMgmt.invites.toString(), safetyfactor: uiDataA.inviteMgmt.safetyfactor, expiryInterval: uiDataA.inviteMgmt.expiryInterval, caModelType: uiDataA.inviteMgmt.caModelType, key: uiDataA.inviteMgmt.key !== \\\"\\\" ? uiDataA.inviteMgmt.key : getQueueId(uiDataB.queueName, componentAccountId) } ]; return JSON.stringify(apiData); } function getQueueId(queueName, accountId) { var arr = queueName.toLowerCase().split(\\\" \\\"); var idArr = []; for (var i = 0; i < arr.length; i++) { if (arr[i] != \\\"\\\") { idArr.push(arr[i]); }; }; return accountId + \\\"-queue-\\\" + idArr.join(\\\"-\\\"); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '50');


-- Updated as part of hotfix for CLOUD-93961 and AP-630

UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"https://test-default.portal.assist.staging.247-inc.net/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function(skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function(team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '38');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var apiData = {\\\"clientId\\\": \\\"nemo-client-\\\"+clientId,\\\"userName\\\": t0.userName,\\\"firstName\\\":t0.firstName,\\\"lastName\\\":t0.lastName,\\\"displayName\\\":t0.displayName,\\\"email\\\":t0.email,\\\"activeChatLimits\\\":t0.activeChatLimits,\\\"autoAcceptChats\\\":t0.autoAcceptChats,\\\"teamId\\\":t0.teamId,\\\"timezone\\\":\\\"GMT0\\\",\\\"roleIds\\\":roles,\\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\",\\\"status\\\":t0.status,\\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\",\\\"key\\\":t0.key,\\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId:skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; })||[],\\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){return ({teamId: team.id})})||[],\\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '39');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"https://test-default.portal.assist.staging.247-inc.net/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function(skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function(team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '36');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var apiData = {\\\"clientId\\\": \\\"nemo-client-\\\"+clientId,\\\"userName\\\": t0.userName,\\\"firstName\\\":t0.firstName,\\\"lastName\\\":t0.lastName,\\\"displayName\\\":t0.displayName,\\\"email\\\":t0.email,\\\"activeChatLimits\\\":t0.activeChatLimits,\\\"autoAcceptChats\\\":t0.autoAcceptChats,\\\"teamId\\\":t0.teamId,\\\"timezone\\\":\\\"GMT0\\\",\\\"roleIds\\\":roles,\\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\",\\\"status\\\":t0.status,\\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\",\\\"key\\\":t0.key,\\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId:skill.id + \\\"-\\\" + (skill.key ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; })||[],\\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){return ({teamId: team.id})})||[],\\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '37');

-- fix for hoop issue
UPDATE `action` SET `response_definition` = '{\"entityResponseTranslator\": \"var ApiResponse = function(_status, _message){ this.status = _status; this.message = _message; }; function translate(responseData) { try{ if(!responseData){ return new ApiResponse(\\\"ERROR\\\", \\\"Failed to publish activity! Please try again or contact the Administrator, if the issue persists!\\\"); } var uiData = JSON.parse(responseData); if(uiData != null && uiData.status == \\\"SUCCESS\\\"){ return new ApiResponse(uiData.status, \\\"\\\"); } else { return new ApiResponse(\\\"ERROR\\\", parseMsg(uiData.errorMessage)); } }catch(e){ return new ApiResponse(\\\"ERROR\\\", \\\"Failed to publish activity! Please try again or contact the Administrator, if the issue persists!\\\"); } } function parseMsg(msg) { var retVal=msg||\\\"\\\"; if(msg.indexOf(\\\"Heuristic\\\")!=-1){retVal= \\\"Entity that you are trying to map is not available in the target environment. Please ensure the mapped entities are published to the target environment.\\\";} else if(msg.indexOf(\\\"entity.invalid.id\\\")!=-1){ retVal=\\\"Entity that you are trying to update is not available in the target environment. Contact [24]7.ai support team.\\\";} return retVal;} \"}' WHERE (`id` = '1');

/*CENTRAL-8126: Update Skill User mapping should rely on skill level value*/
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData) { try{ var val = JSON.parse(JSON.parse(apiData).data.entity); var configMapper = JSON.parse(val.entityAttributes.users); var skillLevel = JSON.parse(val.entityAttributes.skillLevel); var users = []; var key; var skillLevelKey = {\\\"1\\\": \\\"LOW\\\", \\\"2\\\": \\\"MEDIUM\\\", \\\"3\\\": \\\"HIGH\\\"}; users = configMapper.map(function (item) { var userSkillValue; var skillLevelId; skillLevel.forEach(function (levelId) { if (levelId.skillLevelId === item.skillLevelId) { skillLevelId = levelId.skillLevelId; userSkillValue = parseInt(levelId.skillValue); key = skillLevelKey[userSkillValue]; } }); return ({ id: item.userId, name: item.userId, key: key, skillLevelId: skillLevelId, skillValue: userSkillValue })}); var uiData = {\\\"skillId\\\": val.entityBaseData.entityId, \\\"skillName\\\": val.entityBaseData.entityDisplayName, \\\"skillDesc\\\": val.entityAttributes.skillDesc, \\\"ConfigMapper\\\":users, \\\"skillLevels\\\": skillLevel }; return JSON.stringify(uiData); } catch (e) {} return null; }\"}' WHERE (`id` = '24');
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData) { try{ var val = JSON.parse(JSON.parse(apiData).data.entity); var configMapper = JSON.parse(val.entityAttributes.users); var skillLevel = JSON.parse(val.entityAttributes.skillLevel); var users = []; var key; var skillLevelKey = {\\\"1\\\": \\\"LOW\\\", \\\"2\\\": \\\"MEDIUM\\\", \\\"3\\\": \\\"HIGH\\\"}; users = configMapper.map(function (item) { var userSkillValue; var skillLevelId; skillLevel.forEach(function (levelId) { if (levelId.skillLevelId === item.skillLevelId) { skillLevelId = levelId.skillLevelId; userSkillValue = parseInt(levelId.skillValue); key = skillLevelKey[userSkillValue]; } }); return ({ id: item.userId, name: item.userId, key: key, skillLevelId: skillLevelId, skillValue: userSkillValue })}); var uiData = {\\\"skillId\\\": val.entityBaseData.entityId, \\\"skillName\\\": val.entityBaseData.entityDisplayName, \\\"skillDesc\\\": val.entityAttributes.skillDesc, \\\"ConfigMapper\\\":users, \\\"skillLevels\\\": skillLevel }; return JSON.stringify(uiData); } catch (e) {} return null; }\"}' WHERE (`id` = '25');

UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { try{ var uiData = JSON.parse(pageData).STALive_p0; var ConfigMapper = uiData.ConfigMapper; var skillLevels = uiData.skillLevels; var users = []; var skillLevelKey = {\\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3}; var key; users = ConfigMapper.map(function (item) { key = item.key ? skillLevelKey[item.key] : 3; var skillLevelId; skillLevels.forEach(function (skillLevel) { if (skillLevel.skillValue === key) { skillLevelId = skillLevel.skillLevelId; } }); var skillUser = item ? { userId: item.id, skillLevelId: skillLevelId} : null; return skillUser; }); var apiData = [ { \\\"entityBaseData\\\": { \\\"entityId\\\": uiData.skillId, \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityType\\\": \\\"skill\\\" }, \\\"entityAttributes\\\": { \\\"account\\\": componentAccountId, \\\"skillName\\\": uiData.skillName, \\\"skillDesc\\\": uiData.skillDesc, \\\"users\\\": JSON.stringify(users) } } ]; return JSON.stringify(apiData); } catch (e) {} return null; }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' WHERE (`id` = '17');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/admin/rest/ohs/update?entity=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env,prefetch, liveEntityIdMap,componentClientId, componentAccountId) { try{ var uiData = JSON.parse(pageData).STATest_p0; var ConfigMapper = uiData.ConfigMapper; var skillLevels = uiData.skillLevels; var users = []; var skillLevelKey = {\\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3}; var key; users = ConfigMapper.map(function (item) { key = item.key ? skillLevelKey[item.key] : 3; var skillLevelId; skillLevels.forEach(function (skillLevel) { if (skillLevel.skillValue === key) { skillLevelId = skillLevel.skillLevelId; } }); var skillUser = item ? { userId: item.id, skillLevelId: skillLevelId} : null; return skillUser; }); var apiData = [ { \\\"entityBaseData\\\": { \\\"entityId\\\": uiData.skillId, \\\"accountId\\\": componentAccountId, \\\"clientId\\\": componentClientId, \\\"entityType\\\": \\\"skill\\\" }, \\\"entityAttributes\\\": { \\\"account\\\": componentAccountId, \\\"skillName\\\": uiData.skillName, \\\"skillDesc\\\": uiData.skillDesc, \\\"users\\\": JSON.stringify(users) } } ]; return JSON.stringify(apiData); } catch (e) {} return null; }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' WHERE (`id` = '18');

-- fix for CPE-35: Added environment dependency to referer url in headers for Reset Password
UPDATE `action` SET `definition` = '{\"type\": \"REST\",\"method\": \"POST\",\"headers\": {\"Referer\": \"https://test-default.portal.assist${dotDomainEnv}.247-inc.net/en/console\",    \"Content-Type\": \"application/x-www-form-urlencoded\",    \"GenerateAuthToken\": \"Bearer \"},\"serviceId\": \"assist\",\"uploadFile\": false,\"idLookupKeys\": null,\"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/users/${entity}/password/reset\",\"bodyDefinition\": {},\"requestBodyKey\": null,\"restClientType\": null,\"idLookupRequired\": false,\"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var data = JSON.parse(pageData); return JSON.stringify(data.tabsField[0]); }\",\"preFetchDefinition\": null,\"getPathParamFromPageData\": false,\"prefetchRequiredForLiveOnly\": false\n}'
WHERE (`id` = '48');

UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"https://test-default.portal.assist${dotDomainEnv}.247-inc.net/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/users/${entity}/password/modify?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).tabsField[0]; var apiData = { \\\"clientId\\\": \\\"nemo-client\\\" + clientId, \\\"key\\\": uiData.key, \\\"firstName\\\": uiData.firstName, \\\"userName\\\": uiData.userName, \\\"lastName\\\": uiData.lastName, \\\"displayName\\\": uiData.displayName, \\\"screenName\\\":uiData.displayName, \\\"email\\\": uiData.email, \\\"activeChatLimits\\\": uiData.activeChatLimits, \\\"autoAcceptChats\\\":uiData.autoAcceptChats, \\\"status\\\": uiData.status, \\\"teamId\\\": uiData.teamId, \\\"newPassword\\\": uiData.password.newPassword, \\\"confirmPassword\\\": uiData.password.confirmPassword, \\\"roleIds\\\": [ uiData.roleId ], \\\"skillLevels\\\": [], \\\"monitoringTeamIds\\\": [], \\\"authenticationType\\\": uiData.authenticationType, \\\"corruptUserMessage\\\": \\\"\\\", \\\"samlUserName\\\": \\\"\\\", \\\"metadataMap\\\": { \\\"employeeId\\\": uiData.employeeId } }; return JSON.stringify(apiData); }\", \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}'
WHERE (`id` = '49');


/* Skill level Id mapping in user to skills mapping*/
/* updateUserTest */
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData, entity, context, auxResponse) { var uiData = { \\\"tabsField\\\": [{}, {}, {}] }; var u = JSON.parse(apiData).items; var auxResp = JSON.parse(auxResponse); var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits != undefined ? u.activeChatLimits.toString() : 1; t0.autoAcceptChats = u.autoAcceptChats != undefined ? u.autoAcceptChats.toString() : \\\"true\\\"; t0.teamId = u.teamId; if (u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; if (u.authenticationType == \\\"REMOTE_AUTH\\\") { t0.samlUserName = u.samlUserName !== null ? u.samlUserName : \\\"\\\"; } t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper = {}; t1.ConfigMapper = u.skillLevels.map(function(sklvl) { var key; var skillLevelKey = { \\\"1\\\": \\\"LOW\\\", \\\"2\\\": \\\"MEDIUM\\\", \\\"3\\\": \\\"HIGH\\\" }; auxResp.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if(sklvl.skillId === item.skillId) { skillLevel.forEach(function (skills) { if(skills.skillLevelId === sklvl.skillLevelId) { key = skills.skillValue; } }); } }); return ({ id: sklvl.skillId, name: sklvl.skillId, key: skillLevelKey[key] }) }); var t2 = uiData.tabsField[2]; t2.ConfigMapper = {}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function (tId) { return ({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" })}) : []; return JSON.stringify(uiData);}\"}', `execution_order` = '1' 
WHERE (`id` = '50');

/* updateUserLive */
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData, entity, context, auxResponse) { var uiData = { \\\"tabsField\\\": [{}, {}, {}] }; var u = JSON.parse(apiData).items; var auxResp = JSON.parse(auxResponse); var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits != undefined ? u.activeChatLimits.toString() : 1; t0.autoAcceptChats = u.autoAcceptChats != undefined ? u.autoAcceptChats.toString() : \\\"true\\\"; t0.teamId = u.teamId; if (u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; if (u.authenticationType == \\\"REMOTE_AUTH\\\") { t0.samlUserName = u.samlUserName !== null ? u.samlUserName : \\\"\\\"; } t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper = {}; t1.ConfigMapper = u.skillLevels.map(function(sklvl) { var key; var skillLevelKey = { \\\"1\\\": \\\"LOW\\\", \\\"2\\\": \\\"MEDIUM\\\", \\\"3\\\": \\\"HIGH\\\" }; auxResp.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if(sklvl.skillId === item.skillId) { skillLevel.forEach(function (skills) { if(skills.skillLevelId === sklvl.skillLevelId) { key = skills.skillValue; } }); } }); return ({ id: sklvl.skillId, name: sklvl.skillId, key: skillLevelKey[key] }) }); var t2 = uiData.tabsField[2]; t2.ConfigMapper = {}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function (tId) { return ({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" })}) : []; return JSON.stringify(uiData);}\"}', `execution_order` = '1' 
WHERE (`id` = '51');

/* updateUser 
-- fix for CLOUD #94101: Long URI 414 error, Updated User/Agents Actions to send request in body instead of URI.
*/
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\",\"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"clientId\\\": \\\"nemo-client-\\\"+clientId, \\\"userName\\\": t0.userName, \\\"firstName\\\":t0.firstName, \\\"lastName\\\":t0.lastName, \\\"displayName\\\":t0.displayName, \\\"email\\\":t0.email, \\\"activeChatLimits\\\":t0.activeChatLimits, \\\"autoAcceptChats\\\":t0.autoAcceptChats, \\\"teamId\\\":t0.teamId, \\\"timezone\\\":\\\"GMT0\\\", \\\"roleIds\\\":roles, \\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\", \\\"status\\\":t0.status, \\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"key\\\":t0.key, \\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skillLevelId; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; })||[], \\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){ return ({teamId: team.id}) }) || [], \\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '37');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\",\"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"clientId\\\": \\\"nemo-client-\\\"+clientId, \\\"userName\\\": t0.userName, \\\"firstName\\\":t0.firstName, \\\"lastName\\\":t0.lastName, \\\"displayName\\\":t0.displayName, \\\"email\\\":t0.email, \\\"activeChatLimits\\\":t0.activeChatLimits, \\\"autoAcceptChats\\\":t0.autoAcceptChats, \\\"teamId\\\":t0.teamId, \\\"timezone\\\":\\\"GMT0\\\", \\\"roleIds\\\":roles, \\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\", \\\"status\\\":t0.status, \\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"key\\\":t0.key, \\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skillLevelId; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; })||[], \\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){ return ({teamId: team.id}) }) || [], \\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); \", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '39');

/* createUser 
-- fix for CLOUD #94101: Long URI 414 error, Updated User/Agents Actions to send request in body instead of URI.
-- CENTRAL #7832 Accepting dynamic referrer url(client & environment based) in header of actions
*/
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"${serviceDomain}/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\",\"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function (skill) { var skillLevelId; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '36');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"${serviceDomain}/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\",\"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName, \\\"lastName\\\": t0.lastName, \\\"displayName\\\": t0.displayName, \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function (skill) { var skillLevelId; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '38');


-- fix for CLOUD #94101: Long URI 414 error, Updated User/Agents Actions to send request in body instead of URI.
-- CENTRAL #7832 Accepting dynamic referrer url(client & environment based) in header of actions
UPDATE `action` SET `definition` = '{\"type\": \"REST\",\"method\": \"POST\",\"headers\": {\"Referer\": \"${serviceDomain}/en/console\",\"Content-Type\": \"application/x-www-form-urlencoded\",\"GenerateAuthToken\": \"Bearer \"},\"serviceId\": \"assist\",\"uploadFile\": false,\"idLookupKeys\": null,\"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/users/${entity}/password/reset\",\"bodyDefinition\": {},\"requestBodyKey\": null,\"restClientType\": null,\"idLookupRequired\": false,\"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var data = JSON.parse(pageData); return JSON.stringify(data.tabsField[0]); }\",\"urlParamsEncoded\": false,\"preFetchDefinition\": null,\"getPathParamFromPageData\": false,\"prefetchRequiredForLiveOnly\": false\n}'
WHERE (`id` = '48');
UPDATE `action` SET `definition` = '{\"type\": \"REST\",\"method\": \"POST\",\"headers\": {\"Referer\": \"${serviceDomain}/en/console\",\"Content-Type\": \"application/x-www-form-urlencoded\",\"GenerateAuthToken\": \"Bearer \"},\"serviceId\": \"assist\",\"uploadFile\": false,\"idLookupKeys\": null,\"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/users/${entity}/password/modify?entityObj=${body}\",\"bodyDefinition\": {},\"requestBodyKey\": null,\"restClientType\": null,\"idLookupRequired\": false,\"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).tabsField[0]; var apiData = { \\\"clientId\\\": \\\"nemo-client\\\" + clientId, \\\"key\\\": uiData.key, \\\"firstName\\\": uiData.firstName, \\\"userName\\\": uiData.userName, \\\"lastName\\\": uiData.lastName, \\\"displayName\\\": uiData.displayName, \\\"screenName\\\":uiData.displayName, \\\"email\\\": uiData.email, \\\"activeChatLimits\\\": uiData.activeChatLimits, \\\"autoAcceptChats\\\":uiData.autoAcceptChats, \\\"status\\\": uiData.status, \\\"teamId\\\": uiData.teamId, \\\"newPassword\\\": uiData.password.newPassword, \\\"confirmPassword\\\": uiData.password.confirmPassword, \\\"roleIds\\\": [ uiData.roleId ], \\\"skillLevels\\\": [], \\\"monitoringTeamIds\\\": [], \\\"authenticationType\\\": uiData.authenticationType, \\\"corruptUserMessage\\\": \\\"\\\", \\\"samlUserName\\\": \\\"\\\", \\\"metadataMap\\\": { \\\"employeeId\\\": uiData.employeeId } }; return JSON.stringify(apiData); }\",\"urlParamsEncoded\": false,\"preFetchDefinition\": null,\"getPathParamFromPageData\": false,\"prefetchRequiredForLiveOnly\": false\n}'
WHERE (`id` = '49');
UPDATE `action` SET `definition` = '{\"type\": \"REST\",\"method\": \"POST\",\"headers\": {\"referer\": \"${serviceDomain}/en/console\",\"uploadFile\": \"true\",\"Content-Type\": \"multipart/form-data\",\"GenerateAuthToken\": \"Bearer \"},\"serviceId\": \"assist\",\"uploadFile\": true,\"idLookupKeys\": null,\"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/upload/${uploadOption}\",\"bodyDefinition\": {},\"requestBodyKey\": \"uploadfile\",\"restClientType\": \"MULTIPART_FILE\",\"idLookupRequired\": false,\"objectTranslator\": \"function translate(pageData) { var uiData = JSON.parse(pageData).createBulkAgentsTest_p0 ; var uploadOption = uiData.stepTwo.selectType; return uploadOption; }\",\"urlParamsEncoded\": false,\"preFetchDefinition\": null,\"getPathParamFromPageData\": true,\"prefetchRequiredForLiveOnly\": false\n}'
WHERE (`id` = '52');
UPDATE `action` SET `definition` = '{\"type\": \"REST\",\"method\": \"POST\",\"headers\": {\"referer\": \"${serviceDomain}/en/console\",\"uploadFile\": \"true\",\"Content-Type\": \"multipart/form-data\",\"GenerateAuthToken\": \"Bearer \"},\"serviceId\": \"assist\",\"uploadFile\": true,\"idLookupKeys\": null,\"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/upload/${uploadOption}\",\"bodyDefinition\": {},\"requestBodyKey\": \"uploadfile\",\"restClientType\": \"MULTIPART_FILE\",\"idLookupRequired\": false,\"objectTranslator\": \"function translate(pageData) { var uiData = JSON.parse(pageData).createBulkAgentsLive_p0 ; var uploadOption = uiData.stepTwo.selectType; return uploadOption; }\",\"urlParamsEncoded\": false,\"preFetchDefinition\": null,\"getPathParamFromPageData\": true,\"prefetchRequiredForLiveOnly\": false\n}'
WHERE (`id` = '54');

-- fix default page data in users screen
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData) { try { var uiData = { \\\"tabsField\\\": [{\\\"activeChatLimits\\\": \\\"1\\\",\\\"authenticationType\\\": \\\"LOCAL_AUTH\\\",\\\"autoAcceptChats\\\": \\\"true\\\",\\\"roleId\\\": \\\"agent_role_id\\\", \\\"status\\\": \\\"ACTIVE\\\"}, {}, {}] }; var values = JSON.parse(apiData); var list = JSON.parse(values.data.list); var t1 = uiData.tabsField[1]; var data = []; list.forEach(function (items) { var skillLevels = { skillId: items.entityBaseData.entityId, skillLevel: items.entityAttributes.skillLevel }; data.push(skillLevels); }); t1.skillLevels = data; return JSON.stringify(uiData); } catch (e) {} return null; }\"}'
WHERE (`id` = '78');
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData) { try { var uiData = { \\\"tabsField\\\": [{\\\"activeChatLimits\\\": \\\"1\\\",\\\"authenticationType\\\": \\\"LOCAL_AUTH\\\",\\\"autoAcceptChats\\\": \\\"true\\\",\\\"roleId\\\": \\\"agent_role_id\\\", \\\"status\\\": \\\"ACTIVE\\\"}, {}, {}] }; var values = JSON.parse(apiData); var list = JSON.parse(values.data.list); var t1 = uiData.tabsField[1]; var data = []; list.forEach(function (items) { var skillLevels = { skillId: items.entityBaseData.entityId, skillLevel: items.entityAttributes.skillLevel }; data.push(skillLevels); }); t1.skillLevels = data; return JSON.stringify(uiData); } catch (e) {} return null; }\"}'
WHERE (`id` = '79');

-- fix remove entityObj from action url
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"${serviceDomain}/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName.trim(), \\\"lastName\\\": t0.lastName.trim(), \\\"displayName\\\": t0.displayName.trim(), \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function (skill) { var skillLevelId; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\" && t0.authenticationType === \\\"LOCAL_AUTH\\\" && t0.setPassword === \\\"oneTime\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '36');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"clientId\\\": \\\"nemo-client-\\\"+clientId, \\\"userName\\\": t0.userName, \\\"firstName\\\":t0.firstName.trim(), \\\"lastName\\\":t0.lastName.trim(), \\\"displayName\\\":t0.displayName.trim(), \\\"email\\\":t0.email, \\\"activeChatLimits\\\":t0.activeChatLimits, \\\"autoAcceptChats\\\":t0.autoAcceptChats, \\\"teamId\\\":t0.teamId, \\\"timezone\\\":\\\"GMT0\\\", \\\"roleIds\\\":roles, \\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\", \\\"status\\\":t0.status, \\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"key\\\":t0.key, \\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skillLevelId; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; })||[], \\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){ return ({teamId: team.id}) }) || [], \\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '37');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"${serviceDomain}/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).createUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName.trim(), \\\"lastName\\\": t0.lastName.trim(), \\\"displayName\\\": t0.displayName.trim(), \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": t1.ConfigMapper && t1.ConfigMapper.map(function (skill) { var skillLevelId; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) || [], \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\" && t0.authenticationType === \\\"LOCAL_AUTH\\\" && t0.setPassword === \\\"oneTime\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '38');
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).updateUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if(t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); }else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"clientId\\\": \\\"nemo-client-\\\"+clientId, \\\"userName\\\": t0.userName, \\\"firstName\\\":t0.firstName.trim(), \\\"lastName\\\":t0.lastName.trim(), \\\"displayName\\\":t0.displayName.trim(), \\\"email\\\":t0.email, \\\"activeChatLimits\\\":t0.activeChatLimits, \\\"autoAcceptChats\\\":t0.autoAcceptChats, \\\"teamId\\\":t0.teamId, \\\"timezone\\\":\\\"GMT0\\\", \\\"roleIds\\\":roles, \\\"authenticationType\\\":t0.authenticationType||\\\"LOCAL_AUTH\\\", \\\"status\\\":t0.status, \\\"samlUserName\\\":t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"key\\\":t0.key, \\\"skillLevels\\\": t1.ConfigMapper&&t1.ConfigMapper.map(function (skill) { var skillLevelId; var key = skill.key ? skillLevelKey[skill.key] : 3; skillLevels.forEach(function (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { skillLevel.forEach(function (skills) { if (skills.skillValue === key) { skillLevelId = skills.skillLevelId } }); } }); var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; })||[], \\\"monitoringTeamIds\\\":t2.ConfigMapper&&t2.ConfigMapper.map(function(team){ return ({teamId: team.id}) }) || [], \\\"metadataMap\\\":{\\\"employeeId\\\":t0.employeeId}}; return JSON.stringify(apiData); \", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}' 
WHERE (`id` = '39');

-- modify pwd
UPDATE `action` SET `definition` = '{\"type\": \"REST\", \"method\": \"POST\", \"headers\": {\"Referer\": \"${serviceDomain}/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \"}, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/users/${entity}/password/modify?entityObj=${body}\", \"bodyDefinition\": {}, \"requestBodyKey\": null, \"restClientType\": null, \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { var uiData = JSON.parse(pageData).tabsField[0]; var apiData = { \\\"clientId\\\": \\\"nemo-client-\\\" + clientId, \\\"key\\\": uiData.key, \\\"firstName\\\": uiData.firstName, \\\"userName\\\": uiData.userName, \\\"lastName\\\": uiData.lastName, \\\"displayName\\\": uiData.displayName, \\\"screenName\\\":uiData.displayName, \\\"email\\\": uiData.email, \\\"activeChatLimits\\\": uiData.activeChatLimits, \\\"autoAcceptChats\\\":uiData.autoAcceptChats, \\\"status\\\": uiData.status, \\\"teamId\\\": uiData.teamId, \\\"newPassword\\\": uiData.password.newPassword, \\\"confirmPassword\\\": uiData.password.confirmPassword, \\\"roleIds\\\": [ uiData.roleId ], \\\"skillLevels\\\": [], \\\"monitoringTeamIds\\\": [], \\\"authenticationType\\\": uiData.authenticationType, \\\"corruptUserMessage\\\": \\\"\\\", \\\"samlUserName\\\": \\\"\\\", \\\"metadataMap\\\": { \\\"employeeId\\\": uiData.employeeId } }; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": null, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false}'
WHERE (`id` = '49');

-- fix skill to agents mapping issues
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{\"objectTranslator\": \"function translate(apiData, entity, context, auxResponse) { var uiData = { \\\"tabsField\\\": [{}, {}, {}] }; var u = JSON.parse(apiData).items; var auxResp = JSON.parse(auxResponse); var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits != undefined ? u.activeChatLimits.toString() : 1; t0.autoAcceptChats = u.autoAcceptChats != undefined ? u.autoAcceptChats.toString() : \\\"true\\\"; t0.teamId = u.teamId; if (u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; if (u.authenticationType == \\\"REMOTE_AUTH\\\") { t0.samlUserName = u.samlUserName !== null ? u.samlUserName : \\\"\\\"; } t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper = {}; t1.ConfigMapper = u.skillLevels.map(function (sklvl) { var key; var skillLevelKey = { \\\"1\\\": \\\"LOW\\\", \\\"2\\\": \\\"MEDIUM\\\", \\\"3\\\": \\\"HIGH\\\" }; for(var i = 0; i< auxResp.length ; i++) { var item = auxResp[i]; if(item){ var skillLevel = JSON.parse(item.skillLevel); if (sklvl.skillId === item.skillId) { for(var j = 0; j< skillLevel.length ; j++) { var skills = skillLevel[j]; if (skills.skillLevelId === sklvl.skillLevelId) { key = skills.skillValue; break; } } } } if(key){ break; } } return ({ id: sklvl.skillId, name: sklvl.skillId, key: skillLevelKey[key] }) }); var t2 = uiData.tabsField[2]; t2.ConfigMapper = {}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function (tId) { return ({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" }) }) : []; return JSON.stringify(uiData); }\"}' 
WHERE (`id` = '50');
UPDATE `fetch_config_template` SET `resp_api_to_resp_ui` = '{ \"objectTranslator\": \"function translate(apiData, entity, context, auxResponse) { var uiData = { \\\"tabsField\\\": [{}, {}, {}] }; var u = JSON.parse(apiData).items; var auxResp = JSON.parse(auxResponse); var t0 = uiData.tabsField[0]; t0.key = u.key; t0.userName = u.userName; t0.employeeId = u.metadataMap && u.metadataMap.employeeId; t0.firstName = u.firstName; t0.lastName = u.lastName; t0.displayName = u.displayName; t0.email = u.email; t0.activeChatLimits = u.activeChatLimits != undefined ? u.activeChatLimits.toString() : 1; t0.autoAcceptChats = u.autoAcceptChats != undefined ? u.autoAcceptChats.toString() : \\\"true\\\"; t0.teamId = u.teamId; if (u.roleIds.length > 1) { t0.roleId = \\\"superlead_role_id\\\"; } else { t0.roleId = u.roleIds.toString(); } t0.authenticationType = u.authenticationType; if (u.authenticationType == \\\"REMOTE_AUTH\\\") { t0.samlUserName = u.samlUserName !== null ? u.samlUserName : \\\"\\\"; } t0.status = u.status; var t1 = uiData.tabsField[1]; t1.ConfigMapper = {}; t1.ConfigMapper = u.skillLevels.map(function (sklvl) { var key; var skillLevelKey = { \\\"1\\\": \\\"LOW\\\", \\\"2\\\": \\\"MEDIUM\\\", \\\"3\\\": \\\"HIGH\\\" }; for(var i = 0; i< auxResp.length ; i++) { var item = auxResp[i]; if(item){ var skillLevel = JSON.parse(item.skillLevel); if (sklvl.skillId === item.skillId) { for(var j = 0; j< skillLevel.length ; j++) { var skills = skillLevel[j]; if (skills.skillLevelId === sklvl.skillLevelId) { key = skills.skillValue; break; } } } } if(key){ break; } } return ({ id: sklvl.skillId, name: sklvl.skillId, key: skillLevelKey[key] }) }); var t2 = uiData.tabsField[2]; t2.ConfigMapper = {}; t2.ConfigMapper = u.monitoringTeamIds ? u.monitoringTeamIds.map(function (tId) { return ({ id: tId.teamId, name: tId.teamId, key: \\\"\\\" }) }) : []; return JSON.stringify(uiData); }\" }' 
WHERE (`id` = '51');

UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Referer\": \"${serviceDomain}/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { function getSkillLevelsFromConfigMapper(configMapper, skillLevels) { var skillLevelMap = []; if (configMapper) { if (skillLevels && skillLevels.length > 0) { skillLevelMap = configMapper.map(function (skill) { var skillLevelId; var key = (skill.key && skillLevelKey[skill.key]) ? skillLevelKey[skill.key] : 3; for (var i = 0; i < skillLevels.length; i++) { var item = skillLevels[i]; if (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { for (var j = 0; j < skillLevel.length; j++) { var skills = skillLevel[j]; if (skills.skillValue === key) { skillLevelId = skills.skillLevelId; break; } } } } if (skillLevelId) { break; } } var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) } else { /* This code is a fallback feature where skill levels are not stored in pageData - old saved activities before this fix and this workes for skill which are following the common format*/ skillLevelMap = configMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key && isValidSkillKey(skill.key) ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || []; } } return skillLevelMap; } function isValidSkillKey(skill) { if (skill.toUpperCase() == \\\"HIGH\\\" || skill.toUpperCase() == \\\"MEDIUM\\\" || skill.toUpperCase() == \\\"LOW\\\") { return true; } return false; } var uiData = JSON.parse(pageData).createUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName.trim(), \\\"lastName\\\": t0.lastName.trim(), \\\"displayName\\\": t0.displayName.trim(), \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": getSkillLevelsFromConfigMapper(t1.ConfigMapper, skillLevels), \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\" && t0.authenticationType === \\\"LOCAL_AUTH\\\" && t0.setPassword === \\\"oneTime\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '36');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { function getSkillLevelsFromConfigMapper(configMapper, skillLevels) { var skillLevelMap = []; if (configMapper) { if (skillLevels && skillLevels.length > 0) { skillLevelMap = configMapper.map(function (skill) { var skillLevelId; var key = (skill.key && skillLevelKey[skill.key]) ? skillLevelKey[skill.key] : 3; for (var i = 0; i < skillLevels.length; i++) { var item = skillLevels[i]; if (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { for (var j = 0; j < skillLevel.length; j++) { var skills = skillLevel[j]; if (skills.skillValue === key) { skillLevelId = skills.skillLevelId; break; } } } } if (skillLevelId) { break; } } var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) } else { /* This code is a fallback feature where skill levels are not stored in pageData - old saved activities before this fix and this workes for skill which are following the common format*/ skillLevelMap = configMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key && isValidSkillKey(skill.key) ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || []; } } return skillLevelMap; } function isValidSkillKey(skill) { if (skill.toUpperCase() == \\\"HIGH\\\" || skill.toUpperCase() == \\\"MEDIUM\\\" || skill.toUpperCase() == \\\"LOW\\\") { return true; } return false; } var uiData = JSON.parse(pageData).updateUserTest_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"clientId\\\": \\\"nemo-client-\\\" + clientId, \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName.trim(), \\\"lastName\\\": t0.lastName.trim(), \\\"displayName\\\": t0.displayName.trim(), \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"key\\\": t0.key, \\\"skillLevels\\\": getSkillLevelsFromConfigMapper(t1.ConfigMapper, skillLevels), \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '37');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Referer\": \"${serviceDomain}/en/console\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { function getSkillLevelsFromConfigMapper(configMapper, skillLevels) { var skillLevelMap = []; if (configMapper) { if (skillLevels && skillLevels.length > 0) { skillLevelMap = configMapper.map(function (skill) { var skillLevelId; var key = (skill.key && skillLevelKey[skill.key]) ? skillLevelKey[skill.key] : 3; for (var i = 0; i < skillLevels.length; i++) { var item = skillLevels[i]; if (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { for (var j = 0; j < skillLevel.length; j++) { var skills = skillLevel[j]; if (skills.skillValue === key) { skillLevelId = skills.skillLevelId; break; } } } } if (skillLevelId) { break; } } var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) } else { /* This code is a fallback feature where skill levels are not stored in pageData - old saved activities before this fix and this workes for skill which are following the common format*/ skillLevelMap = configMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key && isValidSkillKey(skill.key) ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || []; } } return skillLevelMap; } function isValidSkillKey(skill) { if (skill.toUpperCase() == \\\"HIGH\\\" || skill.toUpperCase() == \\\"MEDIUM\\\" || skill.toUpperCase() == \\\"LOW\\\") { return true; } return false; } var uiData = JSON.parse(pageData).createUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"key\\\": \\\"\\\", \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName.trim(), \\\"lastName\\\": t0.lastName.trim(), \\\"displayName\\\": t0.displayName.trim(), \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"skillLevels\\\": getSkillLevelsFromConfigMapper(t1.ConfigMapper, skillLevels), \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; if (t0.password !== undefined && t0.password.newPassword !== \\\"\\\" && t0.authenticationType === \\\"LOCAL_AUTH\\\" && t0.setPassword === \\\"oneTime\\\") { apiData.newPassword = t0.password.newPassword; apiData.confirmPassword = t0.password.confirmPassword; } return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '38');
UPDATE `action` SET `definition` = '{ \"type\": \"REST\", \"method\": \"POST\", \"headers\": { \"Content-Type\": \"application/x-www-form-urlencoded\", \"GenerateAuthToken\": \"Bearer \" }, \"serviceId\": \"assist\", \"uploadFile\": false, \"idLookupKeys\": null, \"relativePath\": \"/en/hierarchy/rest/clients/${componentClientId}/accounts/${componentAccountId}/agents/update\", \"bodyDefinition\": {}, \"requestBodyKey\": \"entityObj\", \"restClientType\": \"REST_TEMPLATE\", \"idLookupRequired\": false, \"objectTranslator\": \"function translate(pageData, entityId, clientId, accountId, env, prefetch) { function getSkillLevelsFromConfigMapper(configMapper, skillLevels) { var skillLevelMap = []; if (configMapper) { if (skillLevels && skillLevels.length > 0) { skillLevelMap = configMapper.map(function (skill) { var skillLevelId; var key = (skill.key && skillLevelKey[skill.key]) ? skillLevelKey[skill.key] : 3; for (var i = 0; i < skillLevels.length; i++) { var item = skillLevels[i]; if (item) { var skillLevel = JSON.parse(item.skillLevel); if (item.skillId === skill.id) { for (var j = 0; j < skillLevel.length; j++) { var skills = skillLevel[j]; if (skills.skillValue === key) { skillLevelId = skills.skillLevelId; break; } } } } if (skillLevelId) { break; } } var skLvl = skill ? { skillId: skill.id, skillLevelId: skillLevelId } : []; return skLvl; }) } else { /* This code is a fallback feature where skill levels are not stored in pageData - old saved activities before this fix and this workes for skill which are following the common format*/ skillLevelMap = configMapper.map(function (skill) { var skLvl = skill ? { skillId: skill.id, skillLevelId: skill.id + \\\"-\\\" + (skill.key && isValidSkillKey(skill.key) ? skill.key.toUpperCase() : \\\"HIGH\\\") } : []; return skLvl; }) || []; } } return skillLevelMap; } function isValidSkillKey(skill) { if (skill.toUpperCase() == \\\"HIGH\\\" || skill.toUpperCase() == \\\"MEDIUM\\\" || skill.toUpperCase() == \\\"LOW\\\") { return true; } return false; } var uiData = JSON.parse(pageData).updateUserLive_p0; var t0 = uiData.tabsField[0]; var t1 = uiData.tabsField[1]; var t2 = uiData.tabsField[2]; var roles = []; if (t0.roleId == \\\"superlead_role_id\\\") { roles.push(\\\"lead_role_id\\\", \\\"agent_role_id\\\"); } else { roles.push(t0.roleId); } var skillLevels = t1.skillLevels; var skillLevelKey = { \\\"LOW\\\": 1, \\\"MEDIUM\\\": 2, \\\"HIGH\\\": 3 }; var apiData = { \\\"clientId\\\": \\\"nemo-client-\\\" + clientId, \\\"userName\\\": t0.userName, \\\"firstName\\\": t0.firstName.trim(), \\\"lastName\\\": t0.lastName.trim(), \\\"displayName\\\": t0.displayName.trim(), \\\"email\\\": t0.email, \\\"activeChatLimits\\\": t0.activeChatLimits, \\\"autoAcceptChats\\\": t0.autoAcceptChats, \\\"teamId\\\": t0.teamId, \\\"timezone\\\": \\\"GMT0\\\", \\\"roleIds\\\": roles, \\\"authenticationType\\\": t0.authenticationType || \\\"LOCAL_AUTH\\\", \\\"status\\\": t0.status, \\\"samlUserName\\\": t0.authenticationType == \\\"REMOTE_AUTH\\\" ? (t0.samlUserName || \\\"\\\") : \\\"\\\", \\\"key\\\": t0.key, \\\"skillLevels\\\": getSkillLevelsFromConfigMapper(t1.ConfigMapper, skillLevels), \\\"monitoringTeamIds\\\": t2.ConfigMapper && t2.ConfigMapper.map(function (team) { return ({ teamId: team.id }) }) || [], \\\"metadataMap\\\": { \\\"employeeId\\\": t0.employeeId } }; return JSON.stringify(apiData); }\", \"urlParamsEncoded\": false, \"preFetchDefinition\": {}, \"getPathParamFromPageData\": false, \"prefetchRequiredForLiveOnly\": false }' 
WHERE (`id` = '39');

-- CENTRAL: 8140 : Active Cards: Filter already configured active cards from dropdown

UPDATE `config` SET `value` = '\"updateSmartResponse_p0,listSkill,listUser,listFilteredActiveCards\"' WHERE (`code` = 'exclude_cache_fetchfor');
